/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.xtext.example.mydsl.serverGeneratorLanguage.Entity
import org.xtext.example.mydsl.serverGeneratorLanguage.Server
import org.xtext.example.mydsl.serverGeneratorLanguage.DomainModel


/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class ServerGeneratorLanguageGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))

		for(s: resource.allContents.toIterable.filter(typeof(Server))) {
		    fsa.generateFile("sql.properties",
		    	s.compileServer)
		    }
		for(e: resource.allContents.toIterable.filter(typeof(Entity))) {
		    	fsa.generateFile(
		    	"src"+"/"+"com"+"/"+"pallyup"+"/"+"sgl"+"/"+"core"+"/"+"entity"+"/"+ //package "com.pallyup.sgl.core.entity"
		    	e.name.toFirstUpper + ".java", //class name
		    	e.compileEntity)
		    }
		for(e: resource.allContents.toIterable.filter(typeof(Entity))) {
		    	fsa.generateFile(
		    	"src"+"/"+"com"+"/"+"pallyup"+"/"+"sgl"+"/"+"server"+"/"+"resource"+"/"+ //package "com.pallyup.sgl.server.resource"
		    	e.name.toFirstUpper+"Resource"+".java", //class name
		    	e.compileResource1)
		    }
		for(e: resource.allContents.toIterable.filter(typeof(Entity))) {
		    	fsa.generateFile(
		    	"src"+"/"+"com"+"/"+"pallyup"+"/"+"sgl"+"/"+"server"+"/"+"resource"+"/"+ //package "com.pallyup.sgl.server.resource"
		    	e.name.toFirstUpper+"sResource"+".java", //class name
		    	e.compileResource2)
			}
		for(d: resource.allContents.toIterable.filter(typeof(DomainModel))) {
		    	fsa.generateFile(
		    	"src"+"/"+"com"+"/"+"pallyup"+"/"+"sgl"+"/"+"server"+"/"+ //package "com.pallyup.sgl.server"
		    	"SGLServerApplication.java", //class name
		    	d.compileSGLServerApplication)
			}

		
		
		
		fsa.generateFile("src"+"/"+"com"+"/"+"pallyup"+"/"+"sgl"+"/"+"core"+"/"+"data"+"/"+ //package "com.pallyup.sgl.core.data"
		    	"SGLSqlProvider.java", //class name
		    	compileSGLSqlProvider)
		fsa.generateFile("src"+"/"+"com"+"/"+"pallyup"+"/"+"sgl"+"/"+"core"+"/"+"entity"+"/"+"dao"+"/"+ //package "com.pallyup.sgl.core.entity.dao"
		    	"DaoOptions.java", //class name
		    	compileDaoOptions)
		fsa.generateFile("src"+"/"+"com"+"/"+"pallyup"+"/"+"sgl"+"/"+"core"+"/"+"entity"+"/"+"dao"+"/"+ //package "com.pallyup.sgl.core.entity.dao"
		    	"SGLDaoException.java", //class name
		    	compileSGLDaoException)
		fsa.generateFile("src"+"/"+"com"+"/"+"pallyup"+"/"+"sgl"+"/"+"core"+"/"+"entity"+"/"+"dao"+"/"+ //package "com.pallyup.sgl.core.entity.dao"
		    	"SGLResourceMapper.java", //class name
		    	compileSGLResourceMapper)
		fsa.generateFile("src"+"/"+"com"+"/"+"pallyup"+"/"+"sgl"+"/"+"core"+"/"+"util"+"/"+ //package "com.pallyup.sgl.core.util"
		    	"CommonUtils.java", //class name
		    	compileCommonUtils)
		fsa.generateFile("src"+"/"+"com"+"/"+"pallyup"+"/"+"sgl"+"/"+"server"+"/"+"core"+"/"+ //package "com.pallyup.sgl.server.core"
		    	"Result.java", //class name
		    	compileResult)
		
	}
	
	def compileServer(Server s) ''' 
    #jetty or jse
    sgl.www.server=jetty
    «FOR c:s.configs»
    	«IF c.eClass.name.contentEquals('rootConfig')»
    	sgl.www.rootdir=«c.name»
    	«ENDIF»
    	«IF c.eClass.name.contentEquals("hostNameConfig")»
    	sgl.www.hostname=«c.name»
    	«ENDIF»
    	«IF c.eClass.name.contentEquals('portConfig')»
    	sgl.www.port=«c.name»
    	«ENDIF»
    	«IF c.eClass.name.contentEquals('logConfig')»
    	sgl.www.log=«c.name»
    	«ENDIF»
    	«IF c.eClass.name.contentEquals('sqldbConfig')»
    	sgl.www.sqlitedb=«c.name»
    	«ENDIF»
    	
    	«IF c.eClass.name.contentEquals('other')»
    	sgl.www.sales_images=«c.name»
    	«ENDIF»
    	
    	
    «ENDFOR»
	'''
	
	def toJavaType(String inp){
		switch (inp) {
			case "NumberAttribute" : "int"
			case "StringAttribute" : "String"
			case "ImageAttribute" : "String"
			default : ""
		}
	}
	
	def outputAllExceptId(Entity e) {
		var String output = '''«FOR a:e.attributes SEPARATOR ', '»«IF a.name.contentEquals('id0')»«ELSE»«a.eClass.name.toJavaType()» «a.name»«ENDIF»«ENDFOR»'''
		output.substring(2)
	}
	
	def compileEntity(Entity e) '''
	package com.pallyup.sgl.core.entity;

	import java.util.ArrayList;
	 
	 
	public class «e.name.toFirstUpper» {
		private String id;
		«FOR a:e.attributes»
			«IF a.name.contentEquals('id0')»
			«ELSE»
				private «a.eClass.name.toJavaType()» «a.name»;
			«ENDIF»
		«ENDFOR»
	 
	 
		public «e.name.toFirstUpper»(){}
	
		public «e.name.toFirstUpper»(«outputAllExceptId(e)»){
			super();
			«FOR a:e.attributes»
				«IF a.name.contentEquals('id0')»«ELSE»this.«a.name» = «a.name»;«ENDIF»
			«ENDFOR»
		}
		public String getId() {
			return id;
		}
		public void setId(String id) {
			this.id = id;
		}
		«FOR a:e.attributes»«IF a.name.contentEquals('id0')»«ELSE»
		public «a.eClass.name.toJavaType()» get«a.name.toFirstUpper»() {
			return «a.name»;
		}
		public void set«a.name.toFirstUpper»(«a.eClass.name.toJavaType()» «a.name») {
			this.«a.name» = «a.name»;
		}«ENDIF»
		«ENDFOR»
		@Override
		public String toString() {
			return "{«e.name.toFirstUpper»:id=" + id + "«FOR a:e.attributes»«IF a.name.contentEquals('id0')»«ELSE»«a.name»=" + «a.name» + "«ENDIF»«ENDFOR»}";
		}
	
		public static «e.name.toFirstUpper»s collectionInstance(){
			return new «e.name.toFirstUpper»s();
		}
		public static class «e.name.toFirstUpper»s extends ArrayList<«e.name.toFirstUpper»> {
			private static final long serialVersionUID = 1L;
		}
	}
		''' 

	def compileResource1(Entity e) '''
	package com.pallyup.sgl.server.resource;

	import java.util.logging.Level;
	import java.util.logging.Logger;

	import org.restlet.data.Status;
	import org.restlet.resource.Get;
	import org.restlet.resource.ServerResource;
	
	import com.pallyup.sgl.server.core.Result;
	import com.pallyup.sql.core.entity.«e.name.toFirstUpper»;
	import com.pallyup.sql.core.entity.dao.«e.name.toFirstUpper»Dao;
	import com.pallyup.sql.core.entity.dao.SGLDaoException;

	public class «e.name.toFirstUpper»Resource extends ServerResource {

	private static Logger LOGGER = Logger.getLogger(«e.name.toFirstUpper»Resource.class.getSimpleName());
	
	private static final String ATTR_«e.name.toUpperCase»_ID = "«e.name.toFirstUpper»_id";

	public static final String ENDPOINT = «e.name.toFirstUpper»Resource.ENDPOINT + "/{" + ATTR_«e.name.toUpperCase»_ID + "}";
	
	@Get
	public Object get«e.name.toFirstUpper»ById() {
		Result result = new Result();
		
		String id = (String) this.getRequest().getAttributes().get(ATTR_«e.name.toUpperCase»_ID);

		try {
			if(id==null || id.length()==0)
				throw new IllegalArgumentException();
			
			try {
				LOGGER.log(Level.INFO, "Processing get«e.name.toFirstUpper»ById for id: " + id);
				«e.name.toFirstUpper» «e.name» = «e.name.toFirstUpper»Dao.get«e.name.toFirstUpper»(Integer.parseInt(id));
				result.setStatus(Result.Status.OK);
				if(«e.name»!=null){
					result.setData(«e.name»);
					getResponse().setStatus(Status.SUCCESS_OK);
				}
				else{
					result.setError("«e.name.toFirstUpper» not found", Status.CLIENT_ERROR_NOT_FOUND.getCode());
					getResponse().setStatus(Status.CLIENT_ERROR_NOT_FOUND);
				}
			} catch(NumberFormatException e){
				throw new IllegalArgumentException(e);
			}
		} catch(SGLDaoException e){
			LOGGER.log(Level.SEVERE, "A problem occured when processing get«e.name.toFirstUpper»ById for id: " + id, e);
			result.setError("The server encountered a problem. Try again later.", Status.SERVER_ERROR_INTERNAL.getCode());
			getResponse().setStatus(Status.SERVER_ERROR_INTERNAL);
		} catch (IllegalArgumentException e){
			LOGGER.log(Level.WARNING,"Invalid «e.name.toFirstUpper» ID passed as request parameter.");
			result.setError("Invalid argument specified.", Status.CLIENT_ERROR_BAD_REQUEST.getCode());
			getResponse().setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
		} catch (Exception e){
			LOGGER.log(Level.SEVERE, "A problem occured when processing get«e.name.toFirstUpper»ById for id: " + id, e);
			result.setError("The server encountered a problem. Try again later.", Status.SERVER_ERROR_INTERNAL.getCode());
			getResponse().setStatus(Status.SERVER_ERROR_INTERNAL);
		} 
		return result;		
	}
}
	'''

	def compileResource2(Entity e) '''
	Output
	'''

	def compileSGLServerApplication(DomainModel d) '''
	package com.pallyup.sgl.server;
	
	import java.util.logging.Logger;
	
	import org.restlet.Application;
	import org.restlet.Restlet;
	import org.restlet.resource.Directory;
	import org.restlet.routing.Router;
	
	«FOR e:d.entitys»
			import com.pallyup.sgl.server.resource.«e.name.toFirstUpper»Resource;
			import com.pallyup.sgl.server.resource.«e.name.toFirstUpper»sResource;
	«ENDFOR»
	import com.pallyup.sgl.server.resource.AuctionManagerResource;
	
	public class SGLServerApplication extends Application implements SGLServerConstants {
	
		private static Logger LOGGER = Logger.getLogger(SGLServerMain.class.getSimpleName());
		private String wwwRootDir;
		
		public SGLServerApplication(String rootDir){
			this.wwwRootDir = rootDir;
		}
		
	    /**
	     * Creates a root Restlet that will receive all incoming calls.
	     */
	    @Override
	    public synchronized Restlet createInboundRoot() {
	        
	    	Router router = new Router(getContext());
	            	
	    	//attach static web files to "www" folder
	        Directory dir = new Directory(getContext(),this.wwwRootDir);
	        dir.setListingAllowed(true);
	        dir.setDeeplyAccessible(true);
	        
	    	«FOR e:d.entitys»
	    		// ENDPOINT = /«e.name»s
	    		LOGGER.info("Attaching endpoint for " + «e.name.toFirstUpper»sResource.class.getSimpleName() + ": " + «e.name.toFirstUpper»sResource.ENDPOINT);
	    		router.attach(«e.name.toFirstUpper»sResource.ENDPOINT, «e.name.toFirstUpper»sResource.class);
	    		
	    		// ENDPOINT = /«e.name»s/{«e.name»_id}
	    		LOGGER.info("Attaching endpoint for " + «e.name.toFirstUpper»Resource.class.getSimpleName() + ": " + «e.name.toFirstUpper»Resource.ENDPOINT);
	    		router.attach(«e.name.toFirstUpper»Resource.ENDPOINT, «e.name.toFirstUpper»Resource.class);
			«ENDFOR»
	        
	        // ENDPOINT = /auctionmanager
	        LOGGER.info("Attaching endpoint for " + AuctionManagerResource.class.getSimpleName() + ": " + AuctionManagerResource.ENDPOINT);
	        router.attach(AuctionManagerResource.ENDPOINT, AuctionManagerResource.class);
	        
	        // ENDPOINT = /
	        LOGGER.info("Attaching static html endpoint: " + this.wwwRootDir);
	        router.attach("/",dir);
	        
	        return router;
	    }
	
	}
	'''


















	def compileSGLSqlProvider() '''
		package com.pallyup.sgl.core.data;
	
	import java.sql.Connection;
	import java.sql.DriverManager;
	import java.sql.PreparedStatement;
	import java.sql.SQLException;
	import java.sql.Statement;
	import java.util.logging.Level;
	import java.util.logging.Logger;
	
	import com.pallyup.sgl.core.entity.dao.SGLDaoException;
	import com.pallyup.sgl.server.SGLServerMain;
	
	public class SGLSqlProvider {
	
		private static Logger LOGGER = Logger.getLogger(SGLSqlProvider.class.getSimpleName());
		
		private static Connection CONNECTION;
			
		public static Connection getConnection() throws SQLException,
				ClassNotFoundException {
			if (CONNECTION == null) {
				Class.forName("org.sqlite.JDBC");
				CONNECTION = DriverManager.getConnection("jdbc:sqlite:"+SGLServerMain.getSGLSqliteDbPath());
				try {
					Statement stmt = CONNECTION.createStatement();
					
					boolean result  = stmt.execute("PRAGMA foreign_keys=ON;");
					
					LOGGER.info("(RESULT: " + result + ") Enabling Foreign Key Support - PRAGMA foreign_keys = on");
				} catch (SQLException e) {
					LOGGER.log(Level.SEVERE, "Failed to enable foreign key support");
					throw new SGLDaoException(e.getMessage(), e);
				}
			}
			return CONNECTION;
		}
		
		public static PreparedStatement getPreparedStatement(String sql){
			PreparedStatement st = null;
			try {
				st = SGLSqlProvider.getConnection().prepareStatement(sql);
			} catch (SQLException e) {
				LOGGER.severe(e.getClass() + ": Could not create PreparedStatement for " + sql + "\n" + e.getMessage());
			} catch (ClassNotFoundException e) {
				LOGGER.severe(e.getClass() + ": Possible problem with database driver.\n " + e.getMessage());
			}
			return st;	
		}
	}
		
		'''

	def compileDaoOptions() '''
	package com.pallyup.sgl.core.entity.dao;
	
	import java.util.HashMap;
	
	public class DaoOptions extends HashMap<String, Object> {
		
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
	
		public DaoOptions(){
			
		}
	}
	
	'''

	def compileSGLDaoException() '''
	package com.pallyup.sgl.core.entity.dao;
	
	@SuppressWarnings("serial")
	public class SGLDaoException extends RuntimeException {
		public SGLDaoException() {
		}
	
		public SGLDaoException(String msg) {
			super(msg);
		}
	
		public SGLDaoException(Throwable cause) {
			super(cause);
		}
	
		public SGLDaoException(String msg, Throwable cause) {
			super(msg, cause);
		}
	}
	
	'''

	def compileSGLResourceMapper() '''
	Output/Images
	'''

	def compileCommonUtils() '''
	package com.pallyup.sgl.core.util;
	
	import java.awt.Color;
	import java.awt.Graphics2D;
	import java.awt.Image;
	import java.awt.image.BufferedImage;
	import java.io.ByteArrayInputStream;
	import java.io.ByteArrayOutputStream;
	import java.io.File;
	import java.io.IOException;
	import java.util.Calendar;
	import java.util.Iterator;
	
	import javax.imageio.ImageIO;
	import javax.imageio.ImageReadParam;
	import javax.imageio.ImageReader;
	import javax.imageio.stream.ImageInputStream;
	import javax.imageio.stream.ImageOutputStream;
	
	public class CommonUtils {
		public static int getCurrentDateInt() {
			Calendar cal = Calendar.getInstance();
			int day = cal.get(Calendar.DATE);
			int month = cal.get(Calendar.MONTH) + 1;
			int year = cal.get(Calendar.YEAR);
	
			String dateAsInt = String.valueOf(year);
			if (month < 10)
				dateAsInt += "0";
			dateAsInt += String.valueOf(month);
			if (day < 10)
				dateAsInt += "0";
			dateAsInt += String.valueOf(day);
			return Integer.parseInt(dateAsInt);
		}
		
		public static boolean fileExists(String fileName){
			if(fileName==null)
				throw new IllegalArgumentException("fileName cannot be null");
			return new File(fileName).exists();
		}
	
		public static void saveByteImageToFile(byte[] bytes, String path)
				throws IOException {
			// Before is how to change ByteArray back to Image
			ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
			Iterator<?> readers = ImageIO.getImageReadersByFormatName("gif");
			// ImageIO is a class containing static convenience methods for locating
			// ImageReaders
			// and ImageWriters, and performing simple encoding and decoding.
	
			ImageReader reader = (ImageReader) readers.next();
			Object source = bis; // File or InputStream, it seems file is OK
	
			ImageInputStream iis = ImageIO.createImageInputStream(source);
			// Returns an ImageInputStream that will take its input from the given
			// Object
	
			reader.setInput(iis, true);
			ImageReadParam param = reader.getDefaultReadParam();
	
			Image image = reader.read(0, param);
			// got an image file
	
			BufferedImage bufferedImage = new BufferedImage(image.getWidth(null),
					image.getHeight(null), BufferedImage.TYPE_INT_RGB);
			// bufferedImage is the RenderedImage to be written
			Graphics2D g2 = bufferedImage.createGraphics();
	
			//g2.drawImage(image, null, null);
			g2.drawImage(image, 0, 0, bufferedImage.getWidth(), bufferedImage.getHeight(), Color.white, null);
	
			File imageFile = new File(path);
	
			ImageIO.write(bufferedImage, "gif", imageFile);
			// "jpg" is the format of the image
			// imageFile is the file to be written to.
		}
	
		public static byte[] convertGifBytesToJpegBytes(byte[] bytes, Color backgroundColor) throws Exception
		{
		    ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);
		    BufferedImage bufferedImage = ImageIO.read(inputStream);
		    BufferedImage newBi = new BufferedImage(bufferedImage.getWidth(), bufferedImage.getHeight(), BufferedImage.TYPE_INT_RGB);
		    Graphics2D g2d = (Graphics2D) newBi.getGraphics();
		    g2d.drawImage(bufferedImage, 0, 0, bufferedImage.getWidth(), bufferedImage.getHeight(), backgroundColor, null);
		    //bufferedImage.getHeight(), null);
		    ByteArrayOutputStream osByteArray = new ByteArrayOutputStream();
		    ImageOutputStream outputStream = ImageIO.createImageOutputStream(osByteArray);
		    ImageIO.write(newBi, "jpg", outputStream);
		    outputStream.flush();
		    outputStream.close();
		    return osByteArray.toByteArray();
		}
	}
	
	'''

	def compileResult() '''
	package com.pallyup.sgl.server.core;
	
	import java.util.HashMap;
	
	public class Result {
		private HashMap<String, Object> resultData;
		
		public static enum Status {OK, FAILED};
		
		public Result(){
			resultData = new HashMap<String, Object>();
			this.resultData.put("status", Status.FAILED);
		}
		
		public void setData(Object data){
			this.resultData.put("data", data);
		}
		
		public void setStatus(Status status){
			if(status==null)
				throw new IllegalArgumentException("Result status cannot be null");
			
			if(status == Status.OK)
				this.resultData.put("status", Status.OK);
			else if (status == Status.FAILED)
				this.resultData.put("status", Status.FAILED);
		}
		
		public void setError(String errorMessage, int errorCode){
			HashMap<String, Object> error = new HashMap<String, Object>();
				error.put("message", errorMessage);
				error.put("code", errorCode);
			this.resultData.put("error", error);
		}
		
		public Object getData() {
			return resultData.get("data");
		}
		public Status getStatus(){
			return (Status) resultData.get("status");
		}
		public Object getError(){
			return this.resultData.get("error");
		}
		
		@Override
		public String toString() {
			return "Result [data=" + resultData + "]";
		}
	}

	'''


}