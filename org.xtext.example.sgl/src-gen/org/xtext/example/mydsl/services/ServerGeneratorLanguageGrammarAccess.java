/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ServerGeneratorLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cTypesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_0 = (RuleCall)cTypesAssignment.eContents().get(0);
		
		//Model:
		//
		//	types+=Type*;
		public ParserRule getRule() { return rule; }

		//types+=Type*
		public Assignment getTypesAssignment() { return cTypesAssignment; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_0() { return cTypesTypeParserRuleCall_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cServerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDomainModelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGuiParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//
		//	Server | DomainModel | Gui;
		public ParserRule getRule() { return rule; }

		//Server | DomainModel | Gui
		public Alternatives getAlternatives() { return cAlternatives; }

		//Server
		public RuleCall getServerParserRuleCall_0() { return cServerParserRuleCall_0; }

		//DomainModel
		public RuleCall getDomainModelParserRuleCall_1() { return cDomainModelParserRuleCall_1; }

		//Gui
		public RuleCall getGuiParserRuleCall_2() { return cGuiParserRuleCall_2; }
	}

	public class ServerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Server");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSERVERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCONFIGKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConfigsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConfigsConfigParserRuleCall_5_0 = (RuleCall)cConfigsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Server:
		//
		//	"SERVER" name=ID "{" "CONFIG" "{" Configs+=Config* "}" "}";
		public ParserRule getRule() { return rule; }

		//"SERVER" name=ID "{" "CONFIG" "{" Configs+=Config* "}" "}"
		public Group getGroup() { return cGroup; }

		//"SERVER"
		public Keyword getSERVERKeyword_0() { return cSERVERKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"CONFIG"
		public Keyword getCONFIGKeyword_3() { return cCONFIGKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//Configs+=Config*
		public Assignment getConfigsAssignment_5() { return cConfigsAssignment_5; }

		//Config
		public RuleCall getConfigsConfigParserRuleCall_5_0() { return cConfigsConfigParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Config");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRootConfigParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHostNameConfigParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPortConfigParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLogConfigParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSqldbConfigParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cResourceConfigParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Config:
		//
		//	rootConfig | hostNameConfig | portConfig | logConfig | sqldbConfig | resourceConfig;
		public ParserRule getRule() { return rule; }

		//rootConfig | hostNameConfig | portConfig | logConfig | sqldbConfig | resourceConfig
		public Alternatives getAlternatives() { return cAlternatives; }

		//rootConfig
		public RuleCall getRootConfigParserRuleCall_0() { return cRootConfigParserRuleCall_0; }

		//hostNameConfig
		public RuleCall getHostNameConfigParserRuleCall_1() { return cHostNameConfigParserRuleCall_1; }

		//portConfig
		public RuleCall getPortConfigParserRuleCall_2() { return cPortConfigParserRuleCall_2; }

		//logConfig
		public RuleCall getLogConfigParserRuleCall_3() { return cLogConfigParserRuleCall_3; }

		//sqldbConfig
		public RuleCall getSqldbConfigParserRuleCall_4() { return cSqldbConfigParserRuleCall_4; }

		//resourceConfig
		public RuleCall getResourceConfigParserRuleCall_5() { return cResourceConfigParserRuleCall_5; }
	}

	public class RootConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rootConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cROOTDIRKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//rootConfig:
		//
		//	"ROOTDIR" "=" name=ID;
		public ParserRule getRule() { return rule; }

		//"ROOTDIR" "=" name=ID
		public Group getGroup() { return cGroup; }

		//"ROOTDIR"
		public Keyword getROOTDIRKeyword_0() { return cROOTDIRKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class HostNameConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hostNameConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHOSTNAMEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//hostNameConfig:
		//
		//	"HOSTNAME" "=" name=ID;
		public ParserRule getRule() { return rule; }

		//"HOSTNAME" "=" name=ID
		public Group getGroup() { return cGroup; }

		//"HOSTNAME"
		public Keyword getHOSTNAMEKeyword_0() { return cHOSTNAMEKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class PortConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "portConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPORTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//portConfig:
		//
		//	"PORT" "=" name=ID;
		public ParserRule getRule() { return rule; }

		//"PORT" "=" name=ID
		public Group getGroup() { return cGroup; }

		//"PORT"
		public Keyword getPORTKeyword_0() { return cPORTKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class LogConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "logConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLOGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//logConfig:
		//
		//	"LOG" "=" name=ID;
		public ParserRule getRule() { return rule; }

		//"LOG" "=" name=ID
		public Group getGroup() { return cGroup; }

		//"LOG"
		public Keyword getLOGKeyword_0() { return cLOGKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class SqldbConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sqldbConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSQLDBKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//sqldbConfig:
		//
		//	"SQLDB" "=" name=ID;
		public ParserRule getRule() { return rule; }

		//"SQLDB" "=" name=ID
		public Group getGroup() { return cGroup; }

		//"SQLDB"
		public Keyword getSQLDBKeyword_0() { return cSQLDBKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ResourceConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "resourceConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRESOURCEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//resourceConfig:
		//
		//	"RESOURCE" "=" name=ID;
		public ParserRule getRule() { return rule; }

		//"RESOURCE" "=" name=ID
		public Group getGroup() { return cGroup; }

		//"RESOURCE"
		public Keyword getRESOURCEKeyword_0() { return cRESOURCEKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DomainModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDOMAINMODELKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cENTITYSKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEntitysAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEntitysEntityParserRuleCall_5_0 = (RuleCall)cEntitysAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cENTITY_RELATIONSHIPKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cRelationshipsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cRelationshipsRelationshipParserRuleCall_9_0 = (RuleCall)cRelationshipsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//DomainModel:
		//
		//	"DOMAINMODEL" name=ID "{" "ENTITYS" "{" Entitys+=Entity* "}" "ENTITY_RELATIONSHIP" "{" Relationships+=Relationship*
		//
		//	"}" "}";
		public ParserRule getRule() { return rule; }

		//"DOMAINMODEL" name=ID "{" "ENTITYS" "{" Entitys+=Entity* "}" "ENTITY_RELATIONSHIP" "{" Relationships+=Relationship* "}"
		//
		//"}"
		public Group getGroup() { return cGroup; }

		//"DOMAINMODEL"
		public Keyword getDOMAINMODELKeyword_0() { return cDOMAINMODELKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"ENTITYS"
		public Keyword getENTITYSKeyword_3() { return cENTITYSKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//Entitys+=Entity*
		public Assignment getEntitysAssignment_5() { return cEntitysAssignment_5; }

		//Entity
		public RuleCall getEntitysEntityParserRuleCall_5_0() { return cEntitysEntityParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"ENTITY_RELATIONSHIP"
		public Keyword getENTITY_RELATIONSHIPKeyword_7() { return cENTITY_RELATIONSHIPKeyword_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//Relationships+=Relationship*
		public Assignment getRelationshipsAssignment_9() { return cRelationshipsAssignment_9; }

		//Relationship
		public RuleCall getRelationshipsRelationshipParserRuleCall_9_0() { return cRelationshipsRelationshipParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Entity:
		//
		//	name=ID "{" Attributes+=Attribute* "}";
		public ParserRule getRule() { return rule; }

		//name=ID "{" Attributes+=Attribute* "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//Attributes+=Attribute*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_0() { return cAttributesAttributeParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImageAttributeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Attribute:
		//
		//	StringAttribute | NumberAttribute | ImageAttribute;
		public ParserRule getRule() { return rule; }

		//StringAttribute | NumberAttribute | ImageAttribute
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringAttribute
		public RuleCall getStringAttributeParserRuleCall_0() { return cStringAttributeParserRuleCall_0; }

		//NumberAttribute
		public RuleCall getNumberAttributeParserRuleCall_1() { return cNumberAttributeParserRuleCall_1; }

		//ImageAttribute
		public RuleCall getImageAttributeParserRuleCall_2() { return cImageAttributeParserRuleCall_2; }
	}

	public class StringAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTRINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//StringAttribute:
		//
		//	"STRING" name=ID;
		public ParserRule getRule() { return rule; }

		//"STRING" name=ID
		public Group getGroup() { return cGroup; }

		//"STRING"
		public Keyword getSTRINGKeyword_0() { return cSTRINGKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class NumberAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNUMBERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NumberAttribute:
		//
		//	"NUMBER" name=ID;
		public ParserRule getRule() { return rule; }

		//"NUMBER" name=ID
		public Group getGroup() { return cGroup; }

		//"NUMBER"
		public Keyword getNUMBERKeyword_0() { return cNUMBERKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ImageAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImageAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIMAGEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ImageAttribute:
		//
		//	"IMAGE" name=ID;
		public ParserRule getRule() { return rule; }

		//"IMAGE" name=ID
		public Group getGroup() { return cGroup; }

		//"IMAGE"
		public Keyword getIMAGEKeyword_0() { return cIMAGEKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameAttributeCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameAttributeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cNameAttributeCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefNameAttributeCrossReference_2_0 = (CrossReference)cRefNameAssignment_2.eContents().get(0);
		private final RuleCall cRefNameAttributeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cRefNameAttributeCrossReference_2_0.eContents().get(1);
		
		//Relationship:
		//
		//	name=[Attribute|QualifiedName] "->" refName=[Attribute|QualifiedName];
		public ParserRule getRule() { return rule; }

		//name=[Attribute|QualifiedName] "->" refName=[Attribute|QualifiedName]
		public Group getGroup() { return cGroup; }

		//name=[Attribute|QualifiedName]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[Attribute|QualifiedName]
		public CrossReference getNameAttributeCrossReference_0_0() { return cNameAttributeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getNameAttributeQualifiedNameParserRuleCall_0_0_1() { return cNameAttributeQualifiedNameParserRuleCall_0_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//refName=[Attribute|QualifiedName]
		public Assignment getRefNameAssignment_2() { return cRefNameAssignment_2; }

		//[Attribute|QualifiedName]
		public CrossReference getRefNameAttributeCrossReference_2_0() { return cRefNameAttributeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getRefNameAttributeQualifiedNameParserRuleCall_2_0_1() { return cRefNameAttributeQualifiedNameParserRuleCall_2_0_1; }
	}

	public class GuiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Gui");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGUIKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSERVERKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cServerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cServerServerCrossReference_3_0 = (CrossReference)cServerAssignment_3.eContents().get(0);
		private final RuleCall cServerServerIDTerminalRuleCall_3_0_1 = (RuleCall)cServerServerCrossReference_3_0.eContents().get(1);
		private final Keyword cLAYOUTKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLayoutAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLayoutINTTerminalRuleCall_5_0 = (RuleCall)cLayoutAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cGuiFeaturesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cGuiFeaturesGuiFeatureParserRuleCall_7_0 = (RuleCall)cGuiFeaturesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Gui:
		//
		//	"GUI" name=ID "SERVER" server=[Server] "LAYOUT" layout=INT "{" GuiFeatures+=GuiFeature* "}";
		public ParserRule getRule() { return rule; }

		//"GUI" name=ID "SERVER" server=[Server] "LAYOUT" layout=INT "{" GuiFeatures+=GuiFeature* "}"
		public Group getGroup() { return cGroup; }

		//"GUI"
		public Keyword getGUIKeyword_0() { return cGUIKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"SERVER"
		public Keyword getSERVERKeyword_2() { return cSERVERKeyword_2; }

		//server=[Server]
		public Assignment getServerAssignment_3() { return cServerAssignment_3; }

		//[Server]
		public CrossReference getServerServerCrossReference_3_0() { return cServerServerCrossReference_3_0; }

		//ID
		public RuleCall getServerServerIDTerminalRuleCall_3_0_1() { return cServerServerIDTerminalRuleCall_3_0_1; }

		//"LAYOUT"
		public Keyword getLAYOUTKeyword_4() { return cLAYOUTKeyword_4; }

		//layout=INT
		public Assignment getLayoutAssignment_5() { return cLayoutAssignment_5; }

		//INT
		public RuleCall getLayoutINTTerminalRuleCall_5_0() { return cLayoutINTTerminalRuleCall_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//GuiFeatures+=GuiFeature*
		public Assignment getGuiFeaturesAssignment_7() { return cGuiFeaturesAssignment_7; }

		//GuiFeature
		public RuleCall getGuiFeaturesGuiFeatureParserRuleCall_7_0() { return cGuiFeaturesGuiFeatureParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class GuiFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GuiFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGuiLabelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGuiButtonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGuiInputParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//GuiFeature:
		//
		//	GuiLabel | GuiButton | GuiInput;
		public ParserRule getRule() { return rule; }

		//GuiLabel | GuiButton | GuiInput
		public Alternatives getAlternatives() { return cAlternatives; }

		//GuiLabel
		public RuleCall getGuiLabelParserRuleCall_0() { return cGuiLabelParserRuleCall_0; }

		//GuiButton
		public RuleCall getGuiButtonParserRuleCall_1() { return cGuiButtonParserRuleCall_1; }

		//GuiInput
		public RuleCall getGuiInputParserRuleCall_2() { return cGuiInputParserRuleCall_2; }
	}

	public class GuiLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GuiLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLABELKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTEXTKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextSTRINGTerminalRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		private final Keyword cDATAKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cElementAttributeCrossReference_5_0 = (CrossReference)cElementAssignment_5.eContents().get(0);
		private final RuleCall cElementAttributeQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cElementAttributeCrossReference_5_0.eContents().get(1);
		
		//GuiLabel:
		//
		//	"LABEL" name=ID "TEXT" text=STRING "DATA" element=[Attribute|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"LABEL" name=ID "TEXT" text=STRING "DATA" element=[Attribute|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"LABEL"
		public Keyword getLABELKeyword_0() { return cLABELKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"TEXT"
		public Keyword getTEXTKeyword_2() { return cTEXTKeyword_2; }

		//text=STRING
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_3_0() { return cTextSTRINGTerminalRuleCall_3_0; }

		//"DATA"
		public Keyword getDATAKeyword_4() { return cDATAKeyword_4; }

		//element=[Attribute|QualifiedName]
		public Assignment getElementAssignment_5() { return cElementAssignment_5; }

		//[Attribute|QualifiedName]
		public CrossReference getElementAttributeCrossReference_5_0() { return cElementAttributeCrossReference_5_0; }

		//QualifiedName
		public RuleCall getElementAttributeQualifiedNameParserRuleCall_5_0_1() { return cElementAttributeQualifiedNameParserRuleCall_5_0_1; }
	}

	public class GuiButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GuiButton");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBUTTONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTEXTKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextSTRINGTerminalRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		private final Keyword cFUNCTIONKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFuncAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFuncSTRINGTerminalRuleCall_5_0 = (RuleCall)cFuncAssignment_5.eContents().get(0);
		
		//GuiButton:
		//
		//	"BUTTON" name=ID "TEXT" text=STRING "FUNCTION" func=STRING;
		public ParserRule getRule() { return rule; }

		//"BUTTON" name=ID "TEXT" text=STRING "FUNCTION" func=STRING
		public Group getGroup() { return cGroup; }

		//"BUTTON"
		public Keyword getBUTTONKeyword_0() { return cBUTTONKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"TEXT"
		public Keyword getTEXTKeyword_2() { return cTEXTKeyword_2; }

		//text=STRING
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_3_0() { return cTextSTRINGTerminalRuleCall_3_0; }

		//"FUNCTION"
		public Keyword getFUNCTIONKeyword_4() { return cFUNCTIONKeyword_4; }

		//func=STRING
		public Assignment getFuncAssignment_5() { return cFuncAssignment_5; }

		//STRING
		public RuleCall getFuncSTRINGTerminalRuleCall_5_0() { return cFuncSTRINGTerminalRuleCall_5_0; }
	}

	public class GuiInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GuiInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINPUTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTYPEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInputTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputTypeInputTypeParserRuleCall_4_0 = (RuleCall)cInputTypeAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//GuiInput:
		//
		//	"INPUT" name=ID "TYPE" "(" inputType=InputType ")";
		public ParserRule getRule() { return rule; }

		//"INPUT" name=ID "TYPE" "(" inputType=InputType ")"
		public Group getGroup() { return cGroup; }

		//"INPUT"
		public Keyword getINPUTKeyword_0() { return cINPUTKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"TYPE"
		public Keyword getTYPEKeyword_2() { return cTYPEKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//inputType=InputType
		public Assignment getInputTypeAssignment_4() { return cInputTypeAssignment_4; }

		//InputType
		public RuleCall getInputTypeInputTypeParserRuleCall_4_0() { return cInputTypeInputTypeParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class InputTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringInputParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerInputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIdInputParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//InputType:
		//
		//	StringInput | IntegerInput | IdInput;
		public ParserRule getRule() { return rule; }

		//StringInput | IntegerInput | IdInput
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringInput
		public RuleCall getStringInputParserRuleCall_0() { return cStringInputParserRuleCall_0; }

		//IntegerInput
		public RuleCall getIntegerInputParserRuleCall_1() { return cIntegerInputParserRuleCall_1; }

		//IdInput
		public RuleCall getIdInputParserRuleCall_2() { return cIdInputParserRuleCall_2; }
	}

	public class StringInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringInput");
		private final Keyword cStringKeyword = (Keyword)rule.eContents().get(1);
		
		//StringInput:
		//
		//	"string";
		public ParserRule getRule() { return rule; }

		//"string"
		public Keyword getStringKeyword() { return cStringKeyword; }
	}

	public class IntegerInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerInput");
		private final Keyword cIntKeyword = (Keyword)rule.eContents().get(1);
		
		//IntegerInput:
		//
		//	"int";
		public ParserRule getRule() { return rule; }

		//"int"
		public Keyword getIntKeyword() { return cIntKeyword; }
	}

	public class IdInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdInput");
		private final Keyword cIdKeyword = (Keyword)rule.eContents().get(1);
		
		//IdInput:
		//
		//	"id";
		public ParserRule getRule() { return rule; }

		//"id"
		public Keyword getIdKeyword() { return cIdKeyword; }
	}
	
	
	private ModelElements pModel;
	private TypeElements pType;
	private ServerElements pServer;
	private ConfigElements pConfig;
	private RootConfigElements pRootConfig;
	private HostNameConfigElements pHostNameConfig;
	private PortConfigElements pPortConfig;
	private LogConfigElements pLogConfig;
	private SqldbConfigElements pSqldbConfig;
	private ResourceConfigElements pResourceConfig;
	private DomainModelElements pDomainModel;
	private EntityElements pEntity;
	private AttributeElements pAttribute;
	private StringAttributeElements pStringAttribute;
	private NumberAttributeElements pNumberAttribute;
	private ImageAttributeElements pImageAttribute;
	private QualifiedNameElements pQualifiedName;
	private RelationshipElements pRelationship;
	private GuiElements pGui;
	private GuiFeatureElements pGuiFeature;
	private GuiLabelElements pGuiLabel;
	private GuiButtonElements pGuiButton;
	private GuiInputElements pGuiInput;
	private InputTypeElements pInputType;
	private StringInputElements pStringInput;
	private IntegerInputElements pIntegerInput;
	private IdInputElements pIdInput;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ServerGeneratorLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.ServerGeneratorLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//
	//	types+=Type*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Type:
	//
	//	Server | DomainModel | Gui;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Server:
	//
	//	"SERVER" name=ID "{" "CONFIG" "{" Configs+=Config* "}" "}";
	public ServerElements getServerAccess() {
		return (pServer != null) ? pServer : (pServer = new ServerElements());
	}
	
	public ParserRule getServerRule() {
		return getServerAccess().getRule();
	}

	//Config:
	//
	//	rootConfig | hostNameConfig | portConfig | logConfig | sqldbConfig | resourceConfig;
	public ConfigElements getConfigAccess() {
		return (pConfig != null) ? pConfig : (pConfig = new ConfigElements());
	}
	
	public ParserRule getConfigRule() {
		return getConfigAccess().getRule();
	}

	//rootConfig:
	//
	//	"ROOTDIR" "=" name=ID;
	public RootConfigElements getRootConfigAccess() {
		return (pRootConfig != null) ? pRootConfig : (pRootConfig = new RootConfigElements());
	}
	
	public ParserRule getRootConfigRule() {
		return getRootConfigAccess().getRule();
	}

	//hostNameConfig:
	//
	//	"HOSTNAME" "=" name=ID;
	public HostNameConfigElements getHostNameConfigAccess() {
		return (pHostNameConfig != null) ? pHostNameConfig : (pHostNameConfig = new HostNameConfigElements());
	}
	
	public ParserRule getHostNameConfigRule() {
		return getHostNameConfigAccess().getRule();
	}

	//portConfig:
	//
	//	"PORT" "=" name=ID;
	public PortConfigElements getPortConfigAccess() {
		return (pPortConfig != null) ? pPortConfig : (pPortConfig = new PortConfigElements());
	}
	
	public ParserRule getPortConfigRule() {
		return getPortConfigAccess().getRule();
	}

	//logConfig:
	//
	//	"LOG" "=" name=ID;
	public LogConfigElements getLogConfigAccess() {
		return (pLogConfig != null) ? pLogConfig : (pLogConfig = new LogConfigElements());
	}
	
	public ParserRule getLogConfigRule() {
		return getLogConfigAccess().getRule();
	}

	//sqldbConfig:
	//
	//	"SQLDB" "=" name=ID;
	public SqldbConfigElements getSqldbConfigAccess() {
		return (pSqldbConfig != null) ? pSqldbConfig : (pSqldbConfig = new SqldbConfigElements());
	}
	
	public ParserRule getSqldbConfigRule() {
		return getSqldbConfigAccess().getRule();
	}

	//resourceConfig:
	//
	//	"RESOURCE" "=" name=ID;
	public ResourceConfigElements getResourceConfigAccess() {
		return (pResourceConfig != null) ? pResourceConfig : (pResourceConfig = new ResourceConfigElements());
	}
	
	public ParserRule getResourceConfigRule() {
		return getResourceConfigAccess().getRule();
	}

	//DomainModel:
	//
	//	"DOMAINMODEL" name=ID "{" "ENTITYS" "{" Entitys+=Entity* "}" "ENTITY_RELATIONSHIP" "{" Relationships+=Relationship*
	//
	//	"}" "}";
	public DomainModelElements getDomainModelAccess() {
		return (pDomainModel != null) ? pDomainModel : (pDomainModel = new DomainModelElements());
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}

	//Entity:
	//
	//	name=ID "{" Attributes+=Attribute* "}";
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Attribute:
	//
	//	StringAttribute | NumberAttribute | ImageAttribute;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//StringAttribute:
	//
	//	"STRING" name=ID;
	public StringAttributeElements getStringAttributeAccess() {
		return (pStringAttribute != null) ? pStringAttribute : (pStringAttribute = new StringAttributeElements());
	}
	
	public ParserRule getStringAttributeRule() {
		return getStringAttributeAccess().getRule();
	}

	//NumberAttribute:
	//
	//	"NUMBER" name=ID;
	public NumberAttributeElements getNumberAttributeAccess() {
		return (pNumberAttribute != null) ? pNumberAttribute : (pNumberAttribute = new NumberAttributeElements());
	}
	
	public ParserRule getNumberAttributeRule() {
		return getNumberAttributeAccess().getRule();
	}

	//ImageAttribute:
	//
	//	"IMAGE" name=ID;
	public ImageAttributeElements getImageAttributeAccess() {
		return (pImageAttribute != null) ? pImageAttribute : (pImageAttribute = new ImageAttributeElements());
	}
	
	public ParserRule getImageAttributeRule() {
		return getImageAttributeAccess().getRule();
	}

	//QualifiedName:
	//
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Relationship:
	//
	//	name=[Attribute|QualifiedName] "->" refName=[Attribute|QualifiedName];
	public RelationshipElements getRelationshipAccess() {
		return (pRelationship != null) ? pRelationship : (pRelationship = new RelationshipElements());
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}

	//Gui:
	//
	//	"GUI" name=ID "SERVER" server=[Server] "LAYOUT" layout=INT "{" GuiFeatures+=GuiFeature* "}";
	public GuiElements getGuiAccess() {
		return (pGui != null) ? pGui : (pGui = new GuiElements());
	}
	
	public ParserRule getGuiRule() {
		return getGuiAccess().getRule();
	}

	//GuiFeature:
	//
	//	GuiLabel | GuiButton | GuiInput;
	public GuiFeatureElements getGuiFeatureAccess() {
		return (pGuiFeature != null) ? pGuiFeature : (pGuiFeature = new GuiFeatureElements());
	}
	
	public ParserRule getGuiFeatureRule() {
		return getGuiFeatureAccess().getRule();
	}

	//GuiLabel:
	//
	//	"LABEL" name=ID "TEXT" text=STRING "DATA" element=[Attribute|QualifiedName];
	public GuiLabelElements getGuiLabelAccess() {
		return (pGuiLabel != null) ? pGuiLabel : (pGuiLabel = new GuiLabelElements());
	}
	
	public ParserRule getGuiLabelRule() {
		return getGuiLabelAccess().getRule();
	}

	//GuiButton:
	//
	//	"BUTTON" name=ID "TEXT" text=STRING "FUNCTION" func=STRING;
	public GuiButtonElements getGuiButtonAccess() {
		return (pGuiButton != null) ? pGuiButton : (pGuiButton = new GuiButtonElements());
	}
	
	public ParserRule getGuiButtonRule() {
		return getGuiButtonAccess().getRule();
	}

	//GuiInput:
	//
	//	"INPUT" name=ID "TYPE" "(" inputType=InputType ")";
	public GuiInputElements getGuiInputAccess() {
		return (pGuiInput != null) ? pGuiInput : (pGuiInput = new GuiInputElements());
	}
	
	public ParserRule getGuiInputRule() {
		return getGuiInputAccess().getRule();
	}

	//InputType:
	//
	//	StringInput | IntegerInput | IdInput;
	public InputTypeElements getInputTypeAccess() {
		return (pInputType != null) ? pInputType : (pInputType = new InputTypeElements());
	}
	
	public ParserRule getInputTypeRule() {
		return getInputTypeAccess().getRule();
	}

	//StringInput:
	//
	//	"string";
	public StringInputElements getStringInputAccess() {
		return (pStringInput != null) ? pStringInput : (pStringInput = new StringInputElements());
	}
	
	public ParserRule getStringInputRule() {
		return getStringInputAccess().getRule();
	}

	//IntegerInput:
	//
	//	"int";
	public IntegerInputElements getIntegerInputAccess() {
		return (pIntegerInput != null) ? pIntegerInput : (pIntegerInput = new IntegerInputElements());
	}
	
	public ParserRule getIntegerInputRule() {
		return getIntegerInputAccess().getRule();
	}

	//IdInput:
	//
	//	"id";
	public IdInputElements getIdInputAccess() {
		return (pIdInput != null) ? pIdInput : (pIdInput = new IdInputElements());
	}
	
	public ParserRule getIdInputRule() {
		return getIdInputAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
