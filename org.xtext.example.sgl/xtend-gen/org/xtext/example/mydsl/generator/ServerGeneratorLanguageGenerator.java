/**
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.example.mydsl.serverGeneratorLanguage.Attribute;
import org.xtext.example.mydsl.serverGeneratorLanguage.Config;
import org.xtext.example.mydsl.serverGeneratorLanguage.DomainModel;
import org.xtext.example.mydsl.serverGeneratorLanguage.Entity;
import org.xtext.example.mydsl.serverGeneratorLanguage.Server;

/**
 * Generates code from your model files on save.
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class ServerGeneratorLanguageGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Server> _filter = Iterables.<Server>filter(_iterable, Server.class);
    for (final Server s : _filter) {
      CharSequence _compileServer = this.compileServer(s);
      fsa.generateFile("sgl.properties", _compileServer);
    }
    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
    Iterable<Entity> _filter_1 = Iterables.<Entity>filter(_iterable_1, Entity.class);
    for (final Entity e : _filter_1) {
      String _plus = ("src" + "/");
      String _plus_1 = (_plus + "com");
      String _plus_2 = (_plus_1 + "/");
      String _plus_3 = (_plus_2 + "pallyup");
      String _plus_4 = (_plus_3 + "/");
      String _plus_5 = (_plus_4 + "sgl");
      String _plus_6 = (_plus_5 + "/");
      String _plus_7 = (_plus_6 + "core");
      String _plus_8 = (_plus_7 + "/");
      String _plus_9 = (_plus_8 + "entity");
      String _plus_10 = (_plus_9 + "/");
      String _name = e.getName();
      String _firstUpper = StringExtensions.toFirstUpper(_name);
      String _plus_11 = (_plus_10 + _firstUpper);
      String _plus_12 = (_plus_11 + ".java");
      CharSequence _compileEntity = this.compileEntity(e);
      fsa.generateFile(_plus_12, _compileEntity);
    }
    TreeIterator<EObject> _allContents_2 = resource.getAllContents();
    Iterable<EObject> _iterable_2 = IteratorExtensions.<EObject>toIterable(_allContents_2);
    Iterable<Entity> _filter_2 = Iterables.<Entity>filter(_iterable_2, Entity.class);
    for (final Entity e_1 : _filter_2) {
      String _plus_13 = ("src" + "/");
      String _plus_14 = (_plus_13 + "com");
      String _plus_15 = (_plus_14 + "/");
      String _plus_16 = (_plus_15 + "pallyup");
      String _plus_17 = (_plus_16 + "/");
      String _plus_18 = (_plus_17 + "sgl");
      String _plus_19 = (_plus_18 + "/");
      String _plus_20 = (_plus_19 + "server");
      String _plus_21 = (_plus_20 + "/");
      String _plus_22 = (_plus_21 + "resource");
      String _plus_23 = (_plus_22 + "/");
      String _name_1 = e_1.getName();
      String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
      String _plus_24 = (_plus_23 + _firstUpper_1);
      String _plus_25 = (_plus_24 + "Resource");
      String _plus_26 = (_plus_25 + ".java");
      CharSequence _compileEntityResource = this.compileEntityResource(e_1);
      fsa.generateFile(_plus_26, _compileEntityResource);
    }
    TreeIterator<EObject> _allContents_3 = resource.getAllContents();
    Iterable<EObject> _iterable_3 = IteratorExtensions.<EObject>toIterable(_allContents_3);
    Iterable<Entity> _filter_3 = Iterables.<Entity>filter(_iterable_3, Entity.class);
    for (final Entity e_2 : _filter_3) {
      String _plus_27 = ("src" + "/");
      String _plus_28 = (_plus_27 + "com");
      String _plus_29 = (_plus_28 + "/");
      String _plus_30 = (_plus_29 + "pallyup");
      String _plus_31 = (_plus_30 + "/");
      String _plus_32 = (_plus_31 + "sgl");
      String _plus_33 = (_plus_32 + "/");
      String _plus_34 = (_plus_33 + "server");
      String _plus_35 = (_plus_34 + "/");
      String _plus_36 = (_plus_35 + "resource");
      String _plus_37 = (_plus_36 + "/");
      String _name_2 = e_2.getName();
      String _firstUpper_2 = StringExtensions.toFirstUpper(_name_2);
      String _plus_38 = (_plus_37 + _firstUpper_2);
      String _plus_39 = (_plus_38 + "sResource");
      String _plus_40 = (_plus_39 + ".java");
      CharSequence _compileEntitysResource = this.compileEntitysResource(e_2);
      fsa.generateFile(_plus_40, _compileEntitysResource);
    }
    TreeIterator<EObject> _allContents_4 = resource.getAllContents();
    Iterable<EObject> _iterable_4 = IteratorExtensions.<EObject>toIterable(_allContents_4);
    Iterable<DomainModel> _filter_4 = Iterables.<DomainModel>filter(_iterable_4, DomainModel.class);
    for (final DomainModel d : _filter_4) {
      String _plus_41 = ("src" + "/");
      String _plus_42 = (_plus_41 + "com");
      String _plus_43 = (_plus_42 + "/");
      String _plus_44 = (_plus_43 + "pallyup");
      String _plus_45 = (_plus_44 + "/");
      String _plus_46 = (_plus_45 + "sgl");
      String _plus_47 = (_plus_46 + "/");
      String _plus_48 = (_plus_47 + "server");
      String _plus_49 = (_plus_48 + "/");
      String _plus_50 = (_plus_49 + 
        "SGLServerApplication.java");
      CharSequence _compileSGLServerApplication = this.compileSGLServerApplication(d);
      fsa.generateFile(_plus_50, _compileSGLServerApplication);
    }
    TreeIterator<EObject> _allContents_5 = resource.getAllContents();
    Iterable<EObject> _iterable_5 = IteratorExtensions.<EObject>toIterable(_allContents_5);
    Iterable<DomainModel> _filter_5 = Iterables.<DomainModel>filter(_iterable_5, DomainModel.class);
    for (final DomainModel e_3 : _filter_5) {
      String _plus_51 = ("src" + "/");
      String _plus_52 = (_plus_51 + "com");
      String _plus_53 = (_plus_52 + "/");
      String _plus_54 = (_plus_53 + "pallyup");
      String _plus_55 = (_plus_54 + "/");
      String _plus_56 = (_plus_55 + "sgl");
      String _plus_57 = (_plus_56 + "/");
      String _plus_58 = (_plus_57 + "core");
      String _plus_59 = (_plus_58 + "/");
      String _plus_60 = (_plus_59 + "entity");
      String _plus_61 = (_plus_60 + "/");
      String _plus_62 = (_plus_61 + "dao");
      String _plus_63 = (_plus_62 + "/");
      String _plus_64 = (_plus_63 + 
        "SGLResourceMapper");
      String _plus_65 = (_plus_64 + ".java");
      CharSequence _compileSGLResourceMapper = this.compileSGLResourceMapper(e_3);
      fsa.generateFile(_plus_65, _compileSGLResourceMapper);
    }
    TreeIterator<EObject> _allContents_6 = resource.getAllContents();
    Iterable<EObject> _iterable_6 = IteratorExtensions.<EObject>toIterable(_allContents_6);
    Iterable<DomainModel> _filter_6 = Iterables.<DomainModel>filter(_iterable_6, DomainModel.class);
    for (final DomainModel e_4 : _filter_6) {
      String _plus_66 = ("src" + "/");
      String _plus_67 = (_plus_66 + "com");
      String _plus_68 = (_plus_67 + "/");
      String _plus_69 = (_plus_68 + "pallyup");
      String _plus_70 = (_plus_69 + "/");
      String _plus_71 = (_plus_70 + "sgl");
      String _plus_72 = (_plus_71 + "/");
      String _plus_73 = (_plus_72 + "server");
      String _plus_74 = (_plus_73 + "/");
      String _plus_75 = (_plus_74 + 
        "SGLServerMain");
      String _plus_76 = (_plus_75 + ".java");
      CharSequence _compileSGLServerMain = this.compileSGLServerMain(e_4);
      fsa.generateFile(_plus_76, _compileSGLServerMain);
    }
    TreeIterator<EObject> _allContents_7 = resource.getAllContents();
    Iterable<EObject> _iterable_7 = IteratorExtensions.<EObject>toIterable(_allContents_7);
    Iterable<DomainModel> _filter_7 = Iterables.<DomainModel>filter(_iterable_7, DomainModel.class);
    for (final DomainModel e_5 : _filter_7) {
      String _plus_77 = ("src" + "/");
      String _plus_78 = (_plus_77 + "com");
      String _plus_79 = (_plus_78 + "/");
      String _plus_80 = (_plus_79 + "pallyup");
      String _plus_81 = (_plus_80 + "/");
      String _plus_82 = (_plus_81 + "sgl");
      String _plus_83 = (_plus_82 + "/");
      String _plus_84 = (_plus_83 + "server");
      String _plus_85 = (_plus_84 + "/");
      String _plus_86 = (_plus_85 + 
        "SGLServerConstants");
      String _plus_87 = (_plus_86 + ".java");
      CharSequence _compileSGLServerConstants = this.compileSGLServerConstants(e_5);
      fsa.generateFile(_plus_87, _compileSGLServerConstants);
    }
    TreeIterator<EObject> _allContents_8 = resource.getAllContents();
    Iterable<EObject> _iterable_8 = IteratorExtensions.<EObject>toIterable(_allContents_8);
    Iterable<Entity> _filter_8 = Iterables.<Entity>filter(_iterable_8, Entity.class);
    for (final Entity e_6 : _filter_8) {
      String _plus_88 = ("src" + "/");
      String _plus_89 = (_plus_88 + "com");
      String _plus_90 = (_plus_89 + "/");
      String _plus_91 = (_plus_90 + "pallyup");
      String _plus_92 = (_plus_91 + "/");
      String _plus_93 = (_plus_92 + "sgl");
      String _plus_94 = (_plus_93 + "/");
      String _plus_95 = (_plus_94 + "core");
      String _plus_96 = (_plus_95 + "/");
      String _plus_97 = (_plus_96 + "entity");
      String _plus_98 = (_plus_97 + "/");
      String _plus_99 = (_plus_98 + "dao");
      String _plus_100 = (_plus_99 + "/");
      String _name_3 = e_6.getName();
      String _firstUpper_3 = StringExtensions.toFirstUpper(_name_3);
      String _plus_101 = (_plus_100 + _firstUpper_3);
      String _plus_102 = (_plus_101 + "Dao");
      String _plus_103 = (_plus_102 + ".java");
      CharSequence _compileSGLEntityDao = this.compileSGLEntityDao(e_6);
      fsa.generateFile(_plus_103, _compileSGLEntityDao);
    }
    String _plus_104 = ("src" + "/");
    String _plus_105 = (_plus_104 + "com");
    String _plus_106 = (_plus_105 + "/");
    String _plus_107 = (_plus_106 + "pallyup");
    String _plus_108 = (_plus_107 + "/");
    String _plus_109 = (_plus_108 + "sgl");
    String _plus_110 = (_plus_109 + "/");
    String _plus_111 = (_plus_110 + "core");
    String _plus_112 = (_plus_111 + "/");
    String _plus_113 = (_plus_112 + "data");
    String _plus_114 = (_plus_113 + "/");
    String _plus_115 = (_plus_114 + 
      "SGLSqlProvider.java");
    CharSequence _compileSGLSqlProvider = this.compileSGLSqlProvider();
    fsa.generateFile(_plus_115, _compileSGLSqlProvider);
    String _plus_116 = ("src" + "/");
    String _plus_117 = (_plus_116 + "com");
    String _plus_118 = (_plus_117 + "/");
    String _plus_119 = (_plus_118 + "pallyup");
    String _plus_120 = (_plus_119 + "/");
    String _plus_121 = (_plus_120 + "sgl");
    String _plus_122 = (_plus_121 + "/");
    String _plus_123 = (_plus_122 + "core");
    String _plus_124 = (_plus_123 + "/");
    String _plus_125 = (_plus_124 + "entity");
    String _plus_126 = (_plus_125 + "/");
    String _plus_127 = (_plus_126 + "dao");
    String _plus_128 = (_plus_127 + "/");
    String _plus_129 = (_plus_128 + 
      "DaoOptions.java");
    CharSequence _compileDaoOptions = this.compileDaoOptions();
    fsa.generateFile(_plus_129, _compileDaoOptions);
    String _plus_130 = ("src" + "/");
    String _plus_131 = (_plus_130 + "com");
    String _plus_132 = (_plus_131 + "/");
    String _plus_133 = (_plus_132 + "pallyup");
    String _plus_134 = (_plus_133 + "/");
    String _plus_135 = (_plus_134 + "sgl");
    String _plus_136 = (_plus_135 + "/");
    String _plus_137 = (_plus_136 + "core");
    String _plus_138 = (_plus_137 + "/");
    String _plus_139 = (_plus_138 + "entity");
    String _plus_140 = (_plus_139 + "/");
    String _plus_141 = (_plus_140 + "dao");
    String _plus_142 = (_plus_141 + "/");
    String _plus_143 = (_plus_142 + 
      "SGLDaoException.java");
    CharSequence _compileSGLDaoException = this.compileSGLDaoException();
    fsa.generateFile(_plus_143, _compileSGLDaoException);
    String _plus_144 = ("src" + "/");
    String _plus_145 = (_plus_144 + "com");
    String _plus_146 = (_plus_145 + "/");
    String _plus_147 = (_plus_146 + "pallyup");
    String _plus_148 = (_plus_147 + "/");
    String _plus_149 = (_plus_148 + "sgl");
    String _plus_150 = (_plus_149 + "/");
    String _plus_151 = (_plus_150 + "core");
    String _plus_152 = (_plus_151 + "/");
    String _plus_153 = (_plus_152 + "util");
    String _plus_154 = (_plus_153 + "/");
    String _plus_155 = (_plus_154 + 
      "CommonUtils.java");
    CharSequence _compileCommonUtils = this.compileCommonUtils();
    fsa.generateFile(_plus_155, _compileCommonUtils);
    String _plus_156 = ("src" + "/");
    String _plus_157 = (_plus_156 + "com");
    String _plus_158 = (_plus_157 + "/");
    String _plus_159 = (_plus_158 + "pallyup");
    String _plus_160 = (_plus_159 + "/");
    String _plus_161 = (_plus_160 + "sgl");
    String _plus_162 = (_plus_161 + "/");
    String _plus_163 = (_plus_162 + "server");
    String _plus_164 = (_plus_163 + "/");
    String _plus_165 = (_plus_164 + "core");
    String _plus_166 = (_plus_165 + "/");
    String _plus_167 = (_plus_166 + 
      "Result.java");
    CharSequence _compileResult = this.compileResult();
    fsa.generateFile(_plus_167, _compileResult);
  }
  
  public CharSequence compileServer(final Server s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#jetty or jse");
    _builder.newLine();
    _builder.append("sgl.www.server=jetty");
    _builder.newLine();
    {
      EList<Config> _configs = s.getConfigs();
      for(final Config c : _configs) {
        {
          EClass _eClass = c.eClass();
          String _name = _eClass.getName();
          boolean _contentEquals = _name.contentEquals("rootConfig");
          if (_contentEquals) {
            _builder.append("sgl.www.rootdir=");
            String _name_1 = c.getName();
            CharSequence _removeQuote = this.removeQuote(_name_1);
            _builder.append(_removeQuote, "");
          }
        }
        _builder.newLineIfNotEmpty();
        {
          EClass _eClass_1 = c.eClass();
          String _name_2 = _eClass_1.getName();
          boolean _contentEquals_1 = _name_2.contentEquals("hostNameConfig");
          if (_contentEquals_1) {
            _builder.append("sgl.www.hostname=");
            String _name_3 = c.getName();
            CharSequence _removeQuote_1 = this.removeQuote(_name_3);
            _builder.append(_removeQuote_1, "");
          }
        }
        _builder.newLineIfNotEmpty();
        {
          EClass _eClass_2 = c.eClass();
          String _name_4 = _eClass_2.getName();
          boolean _contentEquals_2 = _name_4.contentEquals("portConfig");
          if (_contentEquals_2) {
            _builder.append("sgl.www.port=");
            String _name_5 = c.getName();
            CharSequence _removeQuote_2 = this.removeQuote(_name_5);
            _builder.append(_removeQuote_2, "");
          }
        }
        _builder.newLineIfNotEmpty();
        {
          EClass _eClass_3 = c.eClass();
          String _name_6 = _eClass_3.getName();
          boolean _contentEquals_3 = _name_6.contentEquals("logConfig");
          if (_contentEquals_3) {
            _builder.append("sgl.www.log=");
            String _name_7 = c.getName();
            CharSequence _removeQuote_3 = this.removeQuote(_name_7);
            _builder.append(_removeQuote_3, "");
          }
        }
        _builder.newLineIfNotEmpty();
        {
          EClass _eClass_4 = c.eClass();
          String _name_8 = _eClass_4.getName();
          boolean _contentEquals_4 = _name_8.contentEquals("sqldbConfig");
          if (_contentEquals_4) {
            _builder.append("sgl.www.sqlitedb=");
            String _name_9 = c.getName();
            CharSequence _removeQuote_4 = this.removeQuote(_name_9);
            _builder.append(_removeQuote_4, "");
          }
        }
        _builder.newLineIfNotEmpty();
        {
          EClass _eClass_5 = c.eClass();
          String _name_10 = _eClass_5.getName();
          boolean _contentEquals_5 = _name_10.contentEquals("resourceConfig");
          if (_contentEquals_5) {
            _builder.append("sgl.www.<table_name>s_images=");
            String _name_11 = c.getName();
            CharSequence _removeQuote_5 = this.removeQuote(_name_11);
            _builder.append(_removeQuote_5, "");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence removeQuote(final String inp) {
    int _length = inp.length();
    int _minus = (_length - 1);
    CharSequence _subSequence = inp.subSequence(1, _minus);
    return _subSequence;
  }
  
  public String toJavaType(final String inp) {
    String _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if (Objects.equal(inp,"NumberAttribute")) {
        _matched=true;
        _switchResult = "int";
      }
    }
    if (!_matched) {
      if (Objects.equal(inp,"StringAttribute")) {
        _matched=true;
        _switchResult = "String";
      }
    }
    if (!_matched) {
      if (Objects.equal(inp,"ImageAttribute")) {
        _matched=true;
        _switchResult = "String";
      }
    }
    if (!_matched) {
      _switchResult = "";
    }
    return _switchResult;
  }
  
  public String outputAllExceptId(final Entity e) {
    String _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<Attribute> _attributes = e.getAttributes();
        boolean _hasElements = false;
        for(final Attribute a : _attributes) {
          if (!_hasElements) {
            _hasElements = true;
          } else {
            _builder.appendImmediate(", ", "");
          }
          {
            String _name = a.getName();
            boolean _contentEquals = _name.contentEquals("id0");
            if (_contentEquals) {
            } else {
              EClass _eClass = a.eClass();
              String _name_1 = _eClass.getName();
              String _javaType = this.toJavaType(_name_1);
              _builder.append(_javaType, "");
              _builder.append(" ");
              String _name_2 = a.getName();
              _builder.append(_name_2, "");
            }
          }
        }
      }
      String output = _builder.toString();
      String _substring = output.substring(2);
      _xblockexpression = (_substring);
    }
    return _xblockexpression;
  }
  
  public String outputAllExceptId2(final Entity e) {
    String _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<Attribute> _attributes = e.getAttributes();
        boolean _hasElements = false;
        for(final Attribute a : _attributes) {
          if (!_hasElements) {
            _hasElements = true;
          } else {
            _builder.appendImmediate(", ", "");
          }
          {
            String _name = a.getName();
            boolean _contentEquals = _name.contentEquals("id0");
            if (_contentEquals) {
            } else {
              String _name_1 = a.getName();
              _builder.append(_name_1, "");
            }
          }
        }
      }
      String output = _builder.toString();
      String _substring = output.substring(2);
      _xblockexpression = (_substring);
    }
    return _xblockexpression;
  }
  
  public String outputSetAll(final Entity e) {
    String _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<Attribute> _attributes = e.getAttributes();
        boolean _hasElements = false;
        for(final Attribute a : _attributes) {
          if (!_hasElements) {
            _hasElements = true;
          } else {
            _builder.appendImmediate(", ", "");
          }
          {
            String _name = a.getName();
            boolean _contentEquals = _name.contentEquals("id0");
            if (_contentEquals) {
            } else {
              String _name_1 = a.getName();
              _builder.append(_name_1, "");
              _builder.append("=?");
            }
          }
        }
      }
      String output = _builder.toString();
      String _substring = output.substring(2);
      _xblockexpression = (_substring);
    }
    return _xblockexpression;
  }
  
  public String outputAllQmarkExceptId(final Entity e) {
    String _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<Attribute> _attributes = e.getAttributes();
        boolean _hasElements = false;
        for(final Attribute a : _attributes) {
          if (!_hasElements) {
            _hasElements = true;
          } else {
            _builder.appendImmediate(", ", "");
          }
          {
            String _name = a.getName();
            boolean _contentEquals = _name.contentEquals("id0");
            if (_contentEquals) {
            } else {
              _builder.append("?");
            }
          }
        }
      }
      String output = _builder.toString();
      String _substring = output.substring(2);
      _xblockexpression = (_substring);
    }
    return _xblockexpression;
  }
  
  public CharSequence compileEntity(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.pallyup.sgl.core.entity;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("public class ");
    String _name = e.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private int id;");
    _builder.newLine();
    {
      EList<Attribute> _attributes = e.getAttributes();
      for(final Attribute a : _attributes) {
        {
          String _name_1 = a.getName();
          boolean _contentEquals = _name_1.contentEquals("id0");
          if (_contentEquals) {
          } else {
            _builder.append("\t");
            _builder.append("private ");
            EClass _eClass = a.eClass();
            String _name_2 = _eClass.getName();
            String _javaType = this.toJavaType(_name_2);
            _builder.append(_javaType, "	");
            _builder.append(" ");
            String _name_3 = a.getName();
            _builder.append(_name_3, "	");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append(" ");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_4 = e.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_4);
    _builder.append(_firstUpper_1, "	");
    _builder.append("(){}");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_5 = e.getName();
    String _firstUpper_2 = StringExtensions.toFirstUpper(_name_5);
    _builder.append(_firstUpper_2, "	");
    _builder.append("(");
    String _outputAllExceptId = this.outputAllExceptId(e);
    _builder.append(_outputAllExceptId, "	");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    {
      EList<Attribute> _attributes_1 = e.getAttributes();
      for(final Attribute a_1 : _attributes_1) {
        _builder.append("\t\t");
        {
          String _name_6 = a_1.getName();
          boolean _contentEquals_1 = _name_6.contentEquals("id0");
          if (_contentEquals_1) {
          } else {
            _builder.append("this.");
            String _name_7 = a_1.getName();
            _builder.append(_name_7, "		");
            _builder.append(" = ");
            String _name_8 = a_1.getName();
            _builder.append(_name_8, "		");
            _builder.append(";");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getId() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return id;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setId(int id) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.id = id;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      EList<Attribute> _attributes_2 = e.getAttributes();
      for(final Attribute a_2 : _attributes_2) {
        {
          String _name_9 = a_2.getName();
          boolean _contentEquals_2 = _name_9.contentEquals("id0");
          if (_contentEquals_2) {
          } else {
            _builder.append("\t");
            _builder.append("public ");
            EClass _eClass_1 = a_2.eClass();
            String _name_10 = _eClass_1.getName();
            String _javaType_1 = this.toJavaType(_name_10);
            _builder.append(_javaType_1, "	");
            _builder.append(" get");
            String _name_11 = a_2.getName();
            String _firstUpper_3 = StringExtensions.toFirstUpper(_name_11);
            _builder.append(_firstUpper_3, "	");
            _builder.append("() {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("return ");
            String _name_12 = a_2.getName();
            _builder.append(_name_12, "		");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("public void set");
            String _name_13 = a_2.getName();
            String _firstUpper_4 = StringExtensions.toFirstUpper(_name_13);
            _builder.append(_firstUpper_4, "	");
            _builder.append("(");
            EClass _eClass_2 = a_2.eClass();
            String _name_14 = _eClass_2.getName();
            String _javaType_2 = this.toJavaType(_name_14);
            _builder.append(_javaType_2, "	");
            _builder.append(" ");
            String _name_15 = a_2.getName();
            _builder.append(_name_15, "	");
            _builder.append(") {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("this.");
            String _name_16 = a_2.getName();
            _builder.append(_name_16, "		");
            _builder.append(" = ");
            String _name_17 = a_2.getName();
            _builder.append(_name_17, "		");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("}");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"{");
    String _name_18 = e.getName();
    String _firstUpper_5 = StringExtensions.toFirstUpper(_name_18);
    _builder.append(_firstUpper_5, "		");
    _builder.append(":id=\" + id + \"");
    {
      EList<Attribute> _attributes_3 = e.getAttributes();
      for(final Attribute a_3 : _attributes_3) {
        {
          String _name_19 = a_3.getName();
          boolean _contentEquals_3 = _name_19.contentEquals("id0");
          if (_contentEquals_3) {
          } else {
            String _name_20 = a_3.getName();
            _builder.append(_name_20, "		");
            _builder.append("=\" + ");
            String _name_21 = a_3.getName();
            _builder.append(_name_21, "		");
            _builder.append(" + \"");
          }
        }
      }
    }
    _builder.append("}\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static ");
    String _name_22 = e.getName();
    String _firstUpper_6 = StringExtensions.toFirstUpper(_name_22);
    _builder.append(_firstUpper_6, "	");
    _builder.append("s collectionInstance(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return new ");
    String _name_23 = e.getName();
    String _firstUpper_7 = StringExtensions.toFirstUpper(_name_23);
    _builder.append(_firstUpper_7, "		");
    _builder.append("s();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static class ");
    String _name_24 = e.getName();
    String _firstUpper_8 = StringExtensions.toFirstUpper(_name_24);
    _builder.append(_firstUpper_8, "	");
    _builder.append("s extends ArrayList<");
    String _name_25 = e.getName();
    String _firstUpper_9 = StringExtensions.toFirstUpper(_name_25);
    _builder.append(_firstUpper_9, "	");
    _builder.append("> {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("private static final long serialVersionUID = 1L;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileEntityResource(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.pallyup.sgl.server.resource;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.logging.Level;");
    _builder.newLine();
    _builder.append("import java.util.logging.Logger;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.restlet.data.Status;");
    _builder.newLine();
    _builder.append("import org.restlet.resource.Get;");
    _builder.newLine();
    _builder.append("import org.restlet.resource.ServerResource;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.pallyup.sgl.server.core.Result;");
    _builder.newLine();
    _builder.append("import com.pallyup.sgl.core.entity.");
    String _name = e.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import com.pallyup.sgl.core.entity.dao.");
    String _name_1 = e.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper_1, "");
    _builder.append("Dao;");
    _builder.newLineIfNotEmpty();
    _builder.append("import com.pallyup.sgl.core.entity.dao.SGLDaoException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name_2 = e.getName();
    String _firstUpper_2 = StringExtensions.toFirstUpper(_name_2);
    _builder.append(_firstUpper_2, "");
    _builder.append("Resource extends ServerResource {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("private static Logger LOGGER = Logger.getLogger(");
    String _name_3 = e.getName();
    String _firstUpper_3 = StringExtensions.toFirstUpper(_name_3);
    _builder.append(_firstUpper_3, "");
    _builder.append("Resource.class.getSimpleName());");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("private static final String ATTR_");
    String _name_4 = e.getName();
    String _upperCase = _name_4.toUpperCase();
    _builder.append(_upperCase, "");
    _builder.append("_ID = \"");
    String _name_5 = e.getName();
    String _firstUpper_4 = StringExtensions.toFirstUpper(_name_5);
    _builder.append(_firstUpper_4, "");
    _builder.append("_id\";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public static final String ENDPOINT = ");
    String _name_6 = e.getName();
    String _firstUpper_5 = StringExtensions.toFirstUpper(_name_6);
    _builder.append(_firstUpper_5, "");
    _builder.append("Resource.ENDPOINT + \"/{\" + ATTR_");
    String _name_7 = e.getName();
    String _upperCase_1 = _name_7.toUpperCase();
    _builder.append(_upperCase_1, "");
    _builder.append("_ID + \"}\";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("@Get");
    _builder.newLine();
    _builder.append("public Object get");
    String _name_8 = e.getName();
    String _firstUpper_6 = StringExtensions.toFirstUpper(_name_8);
    _builder.append(_firstUpper_6, "");
    _builder.append("ById() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("Result result = new Result();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String id = (String) this.getRequest().getAttributes().get(ATTR_");
    String _name_9 = e.getName();
    String _upperCase_2 = _name_9.toUpperCase();
    _builder.append(_upperCase_2, "	");
    _builder.append("_ID);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(id==null || id.length()==0)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new IllegalArgumentException();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.log(Level.INFO, \"Processing get");
    String _name_10 = e.getName();
    String _firstUpper_7 = StringExtensions.toFirstUpper(_name_10);
    _builder.append(_firstUpper_7, "			");
    _builder.append("ById for id: \" + id);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    String _name_11 = e.getName();
    String _firstUpper_8 = StringExtensions.toFirstUpper(_name_11);
    _builder.append(_firstUpper_8, "			");
    _builder.append(" ");
    String _name_12 = e.getName();
    _builder.append(_name_12, "			");
    _builder.append(" = ");
    String _name_13 = e.getName();
    String _firstUpper_9 = StringExtensions.toFirstUpper(_name_13);
    _builder.append(_firstUpper_9, "			");
    _builder.append("Dao.get");
    String _name_14 = e.getName();
    String _firstUpper_10 = StringExtensions.toFirstUpper(_name_14);
    _builder.append(_firstUpper_10, "			");
    _builder.append("(Integer.parseInt(id));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("result.setStatus(Result.Status.OK);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(");
    String _name_15 = e.getName();
    _builder.append(_name_15, "			");
    _builder.append("!=null){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("result.setData(");
    String _name_16 = e.getName();
    _builder.append(_name_16, "				");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("getResponse().setStatus(Status.SUCCESS_OK);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("result.setError(\"");
    String _name_17 = e.getName();
    String _firstUpper_11 = StringExtensions.toFirstUpper(_name_17);
    _builder.append(_firstUpper_11, "				");
    _builder.append(" not found\", Status.CLIENT_ERROR_NOT_FOUND.getCode());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("getResponse().setStatus(Status.CLIENT_ERROR_NOT_FOUND);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch(NumberFormatException e){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new IllegalArgumentException(e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} catch(SGLDaoException e){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOGGER.log(Level.SEVERE, \"A problem occured when processing get");
    String _name_18 = e.getName();
    String _firstUpper_12 = StringExtensions.toFirstUpper(_name_18);
    _builder.append(_firstUpper_12, "		");
    _builder.append("ById for id: \" + id, e);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("result.setError(\"The server encountered a problem. Try again later.\", Status.SERVER_ERROR_INTERNAL.getCode());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getResponse().setStatus(Status.SERVER_ERROR_INTERNAL);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} catch (IllegalArgumentException e){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOGGER.log(Level.WARNING,\"Invalid ");
    String _name_19 = e.getName();
    String _firstUpper_13 = StringExtensions.toFirstUpper(_name_19);
    _builder.append(_firstUpper_13, "		");
    _builder.append(" ID passed as request parameter.\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("result.setError(\"Invalid argument specified.\", Status.CLIENT_ERROR_BAD_REQUEST.getCode());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getResponse().setStatus(Status.CLIENT_ERROR_BAD_REQUEST);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} catch (Exception e){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOGGER.log(Level.SEVERE, \"A problem occured when processing get");
    String _name_20 = e.getName();
    String _firstUpper_14 = StringExtensions.toFirstUpper(_name_20);
    _builder.append(_firstUpper_14, "		");
    _builder.append("ById for id: \" + id, e);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("result.setError(\"The server encountered a problem. Try again later.\", Status.SERVER_ERROR_INTERNAL.getCode());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getResponse().setStatus(Status.SERVER_ERROR_INTERNAL);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return result;\t\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileEntitysResource(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.pallyup.sgl.server.resource;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.logging.Level;");
    _builder.newLine();
    _builder.append("import java.util.logging.Logger;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.restlet.data.Status;");
    _builder.newLine();
    _builder.append("import org.restlet.resource.Get;");
    _builder.newLine();
    _builder.append("import org.restlet.resource.ServerResource;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.pallyup.sgl.core.entity.");
    String _name = e.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append(".");
    String _name_1 = e.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper_1, "");
    _builder.append("s;");
    _builder.newLineIfNotEmpty();
    _builder.append("import com.pallyup.sgl.core.entity.dao.");
    String _name_2 = e.getName();
    String _firstUpper_2 = StringExtensions.toFirstUpper(_name_2);
    _builder.append(_firstUpper_2, "");
    _builder.append("Dao;");
    _builder.newLineIfNotEmpty();
    _builder.append("import com.pallyup.sgl.core.entity.dao.SGLDaoException;");
    _builder.newLine();
    _builder.append("import com.pallyup.sgl.server.core.Result;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name_3 = e.getName();
    String _firstUpper_3 = StringExtensions.toFirstUpper(_name_3);
    _builder.append(_firstUpper_3, "");
    _builder.append("sResource extends ServerResource {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Logger LOGGER = Logger.getLogger(");
    String _name_4 = e.getName();
    String _firstUpper_4 = StringExtensions.toFirstUpper(_name_4);
    _builder.append(_firstUpper_4, "	");
    _builder.append("sResource.class.getSimpleName());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final String ENDPOINT = \"/");
    String _name_5 = e.getName();
    _builder.append(_name_5, "	");
    _builder.append("s\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Get");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Object get");
    String _name_6 = e.getName();
    String _firstUpper_5 = StringExtensions.toFirstUpper(_name_6);
    _builder.append(_firstUpper_5, "	");
    _builder.append("s() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("Result result = new Result();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LOGGER.log(Level.INFO, \"Processing get");
    String _name_7 = e.getName();
    String _firstUpper_6 = StringExtensions.toFirstUpper(_name_7);
    _builder.append(_firstUpper_6, "				");
    _builder.append("s\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    String _name_8 = e.getName();
    String _firstUpper_7 = StringExtensions.toFirstUpper(_name_8);
    _builder.append(_firstUpper_7, "				");
    _builder.append("s ");
    String _name_9 = e.getName();
    _builder.append(_name_9, "				");
    _builder.append("s = ");
    String _name_10 = e.getName();
    String _firstUpper_8 = StringExtensions.toFirstUpper(_name_10);
    _builder.append(_firstUpper_8, "				");
    _builder.append("Dao.get");
    String _name_11 = e.getName();
    String _firstUpper_9 = StringExtensions.toFirstUpper(_name_11);
    _builder.append(_firstUpper_9, "				");
    _builder.append("s();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("result.setStatus(Result.Status.OK);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("result.setData(");
    String _name_12 = e.getName();
    _builder.append(_name_12, "				");
    _builder.append("s);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("getResponse().setStatus(Status.SUCCESS_OK);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch(SGLDaoException e){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.log(Level.SEVERE, \"A problem occured when processing get");
    String _name_13 = e.getName();
    String _firstUpper_10 = StringExtensions.toFirstUpper(_name_13);
    _builder.append(_firstUpper_10, "			");
    _builder.append("s\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("result.setError(\"The server encountered a problem. Try again later.\", Status.SERVER_ERROR_INTERNAL.getCode());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getResponse().setStatus(Status.SERVER_ERROR_INTERNAL);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.log(Level.SEVERE, \"A problem occured when processing get");
    String _name_14 = e.getName();
    String _firstUpper_11 = StringExtensions.toFirstUpper(_name_14);
    _builder.append(_firstUpper_11, "			");
    _builder.append("s\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("result.setError(\"The server encountered a problem. Try again later.\", Status.SERVER_ERROR_INTERNAL.getCode());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getResponse().setStatus(Status.SERVER_ERROR_INTERNAL);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public String returnType(final String inp) {
    String _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if (Objects.equal(inp,"NumberAttribute")) {
        _matched=true;
        _switchResult = "Int";
      }
    }
    if (!_matched) {
      if (Objects.equal(inp,"StringAttribute")) {
        _matched=true;
        _switchResult = "String";
      }
    }
    if (!_matched) {
      if (Objects.equal(inp,"ImageAttribute")) {
        _matched=true;
        _switchResult = "String";
      }
    }
    if (!_matched) {
      _switchResult = "";
    }
    return _switchResult;
  }
  
  public CharSequence compileSGLEntityDao(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.pallyup.sgl.core.entity.dao;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.sql.PreparedStatement;");
    _builder.newLine();
    _builder.append("import java.sql.ResultSet;");
    _builder.newLine();
    _builder.append("import java.sql.SQLException;");
    _builder.newLine();
    _builder.append("import java.util.logging.Level;");
    _builder.newLine();
    _builder.append("import java.util.logging.Logger;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.pallyup.sgl.core.data.SGLSqlProvider;");
    _builder.newLine();
    _builder.append("import com.pallyup.sgl.core.entity.");
    String _name = e.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import com.pallyup.sgl.core.entity.");
    String _name_1 = e.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper_1, "");
    _builder.append(".");
    String _name_2 = e.getName();
    String _firstUpper_2 = StringExtensions.toFirstUpper(_name_2);
    _builder.append(_firstUpper_2, "");
    _builder.append("s;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    String _name_3 = e.getName();
    String _firstUpper_3 = StringExtensions.toFirstUpper(_name_3);
    _builder.append(_firstUpper_3, "");
    _builder.append("Dao {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private static Logger LOGGER = Logger.getLogger(");
    String _name_4 = e.getName();
    String _firstUpper_4 = StringExtensions.toFirstUpper(_name_4);
    _builder.append(_firstUpper_4, "	");
    _builder.append("Dao.class.getSimpleName());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final int MAX_BATCH_SIZE = 20;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final String TABLE_NAME = \"");
    String _name_5 = e.getName();
    _builder.append(_name_5, "	");
    _builder.append("s\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final String SELECT_ALL = \"SELECT id, ");
    String _outputAllExceptId2 = this.outputAllExceptId2(e);
    _builder.append(_outputAllExceptId2, "	");
    _builder.append(" FROM \" + TABLE_NAME;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private static final String SELECT_BY_ID = SELECT_ALL + \" WHERE id=?\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final String INSERT = \"INSERT INTO \" + TABLE_NAME + \"(");
    String _outputAllExceptId2_1 = this.outputAllExceptId2(e);
    _builder.append(_outputAllExceptId2_1, "	");
    _builder.append(") VALUES(");
    String _outputAllQmarkExceptId = this.outputAllQmarkExceptId(e);
    _builder.append(_outputAllQmarkExceptId, "	");
    _builder.append(")\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final String UPDATE = \"UPDATE \" + TABLE_NAME + \" SET ");
    String _outputSetAll = this.outputSetAll(e);
    _builder.append(_outputSetAll, "	");
    _builder.append(" WHERE id=?\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final String DELETE_ALL = \"DELETE FROM \" + TABLE_NAME;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final String DELETE_BY_ID = DELETE_ALL + \" WHERE id=?\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static ");
    String _name_6 = e.getName();
    String _firstUpper_5 = StringExtensions.toFirstUpper(_name_6);
    _builder.append(_firstUpper_5, "	");
    _builder.append("s get");
    String _name_7 = e.getName();
    String _firstUpper_6 = StringExtensions.toFirstUpper(_name_7);
    _builder.append(_firstUpper_6, "	");
    _builder.append("s() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _name_8 = e.getName();
    String _firstUpper_7 = StringExtensions.toFirstUpper(_name_8);
    _builder.append(_firstUpper_7, "		");
    _builder.append("s ");
    String _name_9 = e.getName();
    _builder.append(_name_9, "		");
    _builder.append("s = ");
    String _name_10 = e.getName();
    String _firstUpper_8 = StringExtensions.toFirstUpper(_name_10);
    _builder.append(_firstUpper_8, "		");
    _builder.append(".collectionInstance();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("PreparedStatement st = SGLSqlProvider.getPreparedStatement(SELECT_ALL);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ResultSet rs = st.executeQuery();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    String _name_11 = e.getName();
    String _firstUpper_9 = StringExtensions.toFirstUpper(_name_11);
    _builder.append(_firstUpper_9, "			");
    _builder.append(" ");
    String _name_12 = e.getName();
    _builder.append(_name_12, "			");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("while (rs.next()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    String _name_13 = e.getName();
    _builder.append(_name_13, "				");
    _builder.append(" = new ");
    String _name_14 = e.getName();
    String _firstUpper_10 = StringExtensions.toFirstUpper(_name_14);
    _builder.append(_firstUpper_10, "				");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    {
      EList<Attribute> _attributes = e.getAttributes();
      for(final Attribute a : _attributes) {
        {
          String _name_15 = a.getName();
          boolean _contentEquals = _name_15.contentEquals("id0");
          if (_contentEquals) {
            _builder.append("\t\t\t\t");
            String _name_16 = e.getName();
            _builder.append(_name_16, "				");
            _builder.append(".setId(rs.getInt(\"id\"));");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t\t\t\t");
            String _name_17 = e.getName();
            _builder.append(_name_17, "				");
            _builder.append(".set");
            String _name_18 = a.getName();
            String _firstUpper_11 = StringExtensions.toFirstUpper(_name_18);
            _builder.append(_firstUpper_11, "				");
            _builder.append("(rs.get");
            EClass _eClass = a.eClass();
            String _name_19 = _eClass.getName();
            String _returnType = this.returnType(_name_19);
            _builder.append(_returnType, "				");
            _builder.append("(\"");
            String _name_20 = a.getName();
            _builder.append(_name_20, "				");
            _builder.append("\"));");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t\t\t\t");
    String _name_21 = e.getName();
    _builder.append(_name_21, "				");
    _builder.append("s.add(");
    String _name_22 = e.getName();
    _builder.append(_name_22, "				");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("rs.close();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("st.close();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (SQLException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.log(Level.SEVERE, \"(SQL ERROR CODE: \" + e.getErrorCode() + \") Dao could not complete get");
    String _name_23 = e.getName();
    String _firstUpper_12 = StringExtensions.toFirstUpper(_name_23);
    _builder.append(_firstUpper_12, "			");
    _builder.append("s for \" + SELECT_ALL, e);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("throw new SGLDaoException(e.getMessage(), e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    String _name_24 = e.getName();
    _builder.append(_name_24, "		");
    _builder.append("s;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static ");
    String _name_25 = e.getName();
    String _firstUpper_13 = StringExtensions.toFirstUpper(_name_25);
    _builder.append(_firstUpper_13, "	");
    _builder.append(" get");
    String _name_26 = e.getName();
    String _firstUpper_14 = StringExtensions.toFirstUpper(_name_26);
    _builder.append(_firstUpper_14, "	");
    _builder.append("(int id) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(id<0){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new IllegalArgumentException(\"Invalid ");
    String _name_27 = e.getName();
    String _firstUpper_15 = StringExtensions.toFirstUpper(_name_27);
    _builder.append(_firstUpper_15, "			");
    _builder.append(" ID: ");
    String _name_28 = e.getName();
    String _firstUpper_16 = StringExtensions.toFirstUpper(_name_28);
    _builder.append(_firstUpper_16, "			");
    _builder.append(" ID cannot be negative\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    String _name_29 = e.getName();
    String _firstUpper_17 = StringExtensions.toFirstUpper(_name_29);
    _builder.append(_firstUpper_17, "		");
    _builder.append(" ");
    String _name_30 = e.getName();
    _builder.append(_name_30, "		");
    _builder.append(" = new ");
    String _name_31 = e.getName();
    String _firstUpper_18 = StringExtensions.toFirstUpper(_name_31);
    _builder.append(_firstUpper_18, "		");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _name_32 = e.getName();
    _builder.append(_name_32, "		");
    _builder.append(".setId(id);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("PreparedStatement prep = SGLSqlProvider.getPreparedStatement(SELECT_BY_ID);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("prep.setInt(1, ");
    String _name_33 = e.getName();
    _builder.append(_name_33, "			");
    _builder.append(".getId());");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ResultSet rs = prep.executeQuery();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (rs.next()) {");
    _builder.newLine();
    {
      EList<Attribute> _attributes_1 = e.getAttributes();
      for(final Attribute a_1 : _attributes_1) {
        _builder.append("\t\t\t\t");
        {
          String _name_34 = a_1.getName();
          boolean _contentEquals_1 = _name_34.contentEquals("id0");
          if (_contentEquals_1) {
          } else {
            String _name_35 = e.getName();
            _builder.append(_name_35, "				");
            _builder.append(".set");
            String _name_36 = a_1.getName();
            String _firstUpper_19 = StringExtensions.toFirstUpper(_name_36);
            _builder.append(_firstUpper_19, "				");
            _builder.append("(rs.get");
            EClass _eClass_1 = a_1.eClass();
            String _name_37 = _eClass_1.getName();
            String _returnType_1 = this.returnType(_name_37);
            _builder.append(_returnType_1, "				");
            _builder.append("(\"");
            String _name_38 = a_1.getName();
            _builder.append(_name_38, "				");
            _builder.append("\"));");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    String _name_39 = e.getName();
    _builder.append(_name_39, "				");
    _builder.append(" = null;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (SQLException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.log(Level.SEVERE, \"(SQL ERROR CODE: \" + e.getErrorCode() + \") Dao could not complete get");
    String _name_40 = e.getName();
    String _firstUpper_20 = StringExtensions.toFirstUpper(_name_40);
    _builder.append(_firstUpper_20, "			");
    _builder.append(" for \" + SELECT_BY_ID, e);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("throw new SGLDaoException(e.getMessage(), e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    String _name_41 = e.getName();
    _builder.append(_name_41, "		");
    _builder.append(";\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static int create");
    String _name_42 = e.getName();
    String _firstUpper_21 = StringExtensions.toFirstUpper(_name_42);
    _builder.append(_firstUpper_21, "	");
    _builder.append("(");
    String _name_43 = e.getName();
    String _firstUpper_22 = StringExtensions.toFirstUpper(_name_43);
    _builder.append(_firstUpper_22, "	");
    _builder.append(" ");
    String _name_44 = e.getName();
    _builder.append(_name_44, "	");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(");
    String _name_45 = e.getName();
    _builder.append(_name_45, "		");
    _builder.append("==null){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("throw new IllegalArgumentException(\"Invalid ");
    String _name_46 = e.getName();
    String _firstUpper_23 = StringExtensions.toFirstUpper(_name_46);
    _builder.append(_firstUpper_23, "			");
    _builder.append(" Object: Cannot persist null object\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int generatedKey = -1;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("PreparedStatement prep = SGLSqlProvider.getPreparedStatement(INSERT);");
    _builder.newLine();
    {
      EList<Attribute> _attributes_2 = e.getAttributes();
      for(final Attribute a_2 : _attributes_2) {
        _builder.append("\t\t\t");
        {
          String _name_47 = a_2.getName();
          boolean _contentEquals_2 = _name_47.contentEquals("id0");
          if (_contentEquals_2) {
          } else {
            _builder.append("//prep.set");
            EClass _eClass_2 = a_2.eClass();
            String _name_48 = _eClass_2.getName();
            String _returnType_2 = this.returnType(_name_48);
            _builder.append(_returnType_2, "			");
            _builder.append("([note:num], ");
            String _name_49 = e.getName();
            _builder.append(_name_49, "			");
            _builder.append(".get");
            String _name_50 = a_2.getName();
            String _firstUpper_24 = StringExtensions.toFirstUpper(_name_50);
            _builder.append(_firstUpper_24, "			");
            _builder.append("());");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("prep.execute();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ResultSet generatedKeys = prep.getGeneratedKeys();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (generatedKeys.next()) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("generatedKey = (int) generatedKeys.getLong(1);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("throw new SQLException(\"Creating ");
    String _name_51 = e.getName();
    _builder.append(_name_51, "	            ");
    _builder.append(" failed, no generated key obtained.\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("catch (SQLException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.log(Level.SEVERE, \"(SQL ERROR CODE: \" + e.getErrorCode() + \") Dao could not complete create");
    String _name_52 = e.getName();
    String _firstUpper_25 = StringExtensions.toFirstUpper(_name_52);
    _builder.append(_firstUpper_25, "			");
    _builder.append(" for \" + INSERT + \" and ");
    String _name_53 = e.getName();
    _builder.append(_name_53, "			");
    _builder.append("s \" + ");
    String _name_54 = e.getName();
    _builder.append(_name_54, "			");
    _builder.append(", e);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("throw new SGLDaoException(e.getMessage(), e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return generatedKey;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void create");
    String _name_55 = e.getName();
    String _firstUpper_26 = StringExtensions.toFirstUpper(_name_55);
    _builder.append(_firstUpper_26, "	");
    _builder.append("(");
    String _name_56 = e.getName();
    String _firstUpper_27 = StringExtensions.toFirstUpper(_name_56);
    _builder.append(_firstUpper_27, "	");
    _builder.append("s ");
    String _name_57 = e.getName();
    _builder.append(_name_57, "	");
    _builder.append("s){");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(");
    String _name_58 = e.getName();
    _builder.append(_name_58, "		");
    _builder.append("s==null){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("throw new IllegalArgumentException(\"Invalid ");
    String _name_59 = e.getName();
    String _firstUpper_28 = StringExtensions.toFirstUpper(_name_59);
    _builder.append(_firstUpper_28, "			");
    _builder.append("s Object: Cannot persist null object\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PreparedStatement prep = SGLSqlProvider.getPreparedStatement(INSERT);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("prep.getConnection().setAutoCommit(false);");
    _builder.newLine();
    _builder.append("\t\t\t");
    String _name_60 = e.getName();
    String _firstUpper_29 = StringExtensions.toFirstUpper(_name_60);
    _builder.append(_firstUpper_29, "			");
    _builder.append(" ");
    String _name_61 = e.getName();
    _builder.append(_name_61, "			");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("for (int i=0; i<");
    String _name_62 = e.getName();
    _builder.append(_name_62, "			");
    _builder.append("s.size(); i++){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    String _name_63 = e.getName();
    _builder.append(_name_63, "				");
    _builder.append(" = ");
    String _name_64 = e.getName();
    _builder.append(_name_64, "				");
    _builder.append("s.get(i);");
    _builder.newLineIfNotEmpty();
    {
      EList<Attribute> _attributes_3 = e.getAttributes();
      for(final Attribute a_3 : _attributes_3) {
        _builder.append("\t\t\t\t");
        {
          String _name_65 = a_3.getName();
          boolean _contentEquals_3 = _name_65.contentEquals("id0");
          if (_contentEquals_3) {
            _builder.append("prep.setInt(1, ");
            String _name_66 = e.getName();
            _builder.append(_name_66, "				");
            _builder.append(".getId());");
          } else {
            _builder.append("//prep.set");
            EClass _eClass_3 = a_3.eClass();
            String _name_67 = _eClass_3.getName();
            String _returnType_3 = this.returnType(_name_67);
            _builder.append(_returnType_3, "				");
            _builder.append("([note:num], ");
            String _name_68 = e.getName();
            _builder.append(_name_68, "				");
            _builder.append(".get");
            String _name_69 = a_3.getName();
            String _firstUpper_30 = StringExtensions.toFirstUpper(_name_69);
            _builder.append(_firstUpper_30, "				");
            _builder.append("());");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t");
    _builder.append("prep.addBatch();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("//");
    String _name_70 = e.getName();
    _builder.append(_name_70, "				");
    _builder.append(" has reached batch size or ");
    String _name_71 = e.getName();
    _builder.append(_name_71, "				");
    _builder.append(" size is complete");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("if( (i%MAX_BATCH_SIZE)==0 || i==");
    String _name_72 = e.getName();
    _builder.append(_name_72, "				");
    _builder.append("s.size()-1){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("prep.executeBatch();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("ResultSet generatedKeys = prep.getGeneratedKeys();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("while(generatedKeys.next()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("long id = generatedKeys.getLong(1);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("System.out.println(id);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("prep.getConnection().setAutoCommit(true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.info(\"Executing SQL insert for\" + ");
    String _name_73 = e.getName();
    _builder.append(_name_73, "			");
    _builder.append("s);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("} catch (SQLException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.log(Level.SEVERE, \"(SQL ERROR CODE: \" + e.getErrorCode() + \") Dao could not complete create");
    String _name_74 = e.getName();
    String _firstUpper_31 = StringExtensions.toFirstUpper(_name_74);
    _builder.append(_firstUpper_31, "			");
    _builder.append("s for \" + INSERT + \" and ");
    String _name_75 = e.getName();
    _builder.append(_name_75, "			");
    _builder.append("s \" + ");
    String _name_76 = e.getName();
    _builder.append(_name_76, "			");
    _builder.append("s, e);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("throw new SGLDaoException(e.getMessage(), e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void update");
    String _name_77 = e.getName();
    String _firstUpper_32 = StringExtensions.toFirstUpper(_name_77);
    _builder.append(_firstUpper_32, "	");
    _builder.append("(");
    String _name_78 = e.getName();
    String _firstUpper_33 = StringExtensions.toFirstUpper(_name_78);
    _builder.append(_firstUpper_33, "	");
    _builder.append(" ");
    String _name_79 = e.getName();
    _builder.append(_name_79, "	");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(");
    String _name_80 = e.getName();
    _builder.append(_name_80, "		");
    _builder.append("==null){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("throw new IllegalArgumentException(\"Invalid ");
    String _name_81 = e.getName();
    String _firstUpper_34 = StringExtensions.toFirstUpper(_name_81);
    _builder.append(_firstUpper_34, "			");
    _builder.append(" Object: Cannot persist null object\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PreparedStatement prep = SGLSqlProvider.getPreparedStatement(UPDATE);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    {
      EList<Attribute> _attributes_4 = e.getAttributes();
      for(final Attribute a_4 : _attributes_4) {
        _builder.append("\t\t\t");
        {
          String _name_82 = a_4.getName();
          boolean _contentEquals_4 = _name_82.contentEquals("id0");
          if (_contentEquals_4) {
          } else {
            _builder.append("//prep.set");
            EClass _eClass_4 = a_4.eClass();
            String _name_83 = _eClass_4.getName();
            String _returnType_4 = this.returnType(_name_83);
            _builder.append(_returnType_4, "			");
            _builder.append("([note:num], ");
            String _name_84 = e.getName();
            _builder.append(_name_84, "			");
            _builder.append(".get");
            String _name_85 = a_4.getName();
            String _firstUpper_35 = StringExtensions.toFirstUpper(_name_85);
            _builder.append(_firstUpper_35, "			");
            _builder.append("());");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("int result = prep.executeUpdate();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.info(result + \" rows were affected when executing \" + UPDATE + \" with param \" + ");
    String _name_86 = e.getName();
    _builder.append(_name_86, "			");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("} catch (SQLException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.log(Level.SEVERE, \"(SQL ERROR CODE: \" + e.getErrorCode() + \") Dao could not complete update");
    String _name_87 = e.getName();
    String _firstUpper_36 = StringExtensions.toFirstUpper(_name_87);
    _builder.append(_firstUpper_36, "			");
    _builder.append(" for \" + UPDATE + \" and ");
    String _name_88 = e.getName();
    _builder.append(_name_88, "			");
    _builder.append(" \" + ");
    String _name_89 = e.getName();
    _builder.append(_name_89, "			");
    _builder.append(", e);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("throw new SGLDaoException(e.getMessage(), e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void delete");
    String _name_90 = e.getName();
    String _firstUpper_37 = StringExtensions.toFirstUpper(_name_90);
    _builder.append(_firstUpper_37, "	");
    _builder.append("(int id) {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(id<0){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new IllegalArgumentException(\"Invalid ");
    String _name_91 = e.getName();
    String _firstUpper_38 = StringExtensions.toFirstUpper(_name_91);
    _builder.append(_firstUpper_38, "			");
    _builder.append(" ID: ");
    String _name_92 = e.getName();
    String _firstUpper_39 = StringExtensions.toFirstUpper(_name_92);
    _builder.append(_firstUpper_39, "			");
    _builder.append(" ID cannot be negative\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("PreparedStatement prep = SGLSqlProvider.getPreparedStatement(DELETE_BY_ID);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("prep.setInt(1, id);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int result = prep.executeUpdate();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.info(result + \" rows were affected when executing \" + DELETE_BY_ID + \" with param \" + id);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (SQLException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.log(Level.SEVERE, \"(SQL ERROR CODE: \" + e.getErrorCode() + \") Dao could not complete delete");
    String _name_93 = e.getName();
    String _firstUpper_40 = StringExtensions.toFirstUpper(_name_93);
    _builder.append(_firstUpper_40, "			");
    _builder.append(" for \" + DELETE_BY_ID, e);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("throw new SGLDaoException(e.getMessage(), e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*public static void deleteAll");
    String _name_94 = e.getName();
    String _firstUpper_41 = StringExtensions.toFirstUpper(_name_94);
    _builder.append(_firstUpper_41, "	");
    _builder.append("s(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("PreparedStatement prep = SGLSqlProvider.getPreparedStatement(DELETE_ALL);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int result = prep.executeUpdate();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.info(result + \" rows were affected when executing \" + DELETE_ALL);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (SQLException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.log(Level.SEVERE, \"(SQL ERROR CODE: \" + e.getErrorCode() + \") Dao could not complete deleteAll");
    String _name_95 = e.getName();
    String _firstUpper_42 = StringExtensions.toFirstUpper(_name_95);
    _builder.append(_firstUpper_42, "			");
    _builder.append("s for \" + DELETE_ALL, e);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("throw new SGLDaoException(e.getMessage(), e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}*/");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileSGLServerApplication(final DomainModel d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.pallyup.sgl.server;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.logging.Logger;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.restlet.Application;");
    _builder.newLine();
    _builder.append("import org.restlet.Restlet;");
    _builder.newLine();
    _builder.append("import org.restlet.resource.Directory;");
    _builder.newLine();
    _builder.append("import org.restlet.routing.Router;");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Entity> _entitys = d.getEntitys();
      for(final Entity e : _entitys) {
        _builder.append("import com.pallyup.sgl.server.resource.");
        String _name = e.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name);
        _builder.append(_firstUpper, "");
        _builder.append("Resource;");
        _builder.newLineIfNotEmpty();
        _builder.append("import com.pallyup.sgl.server.resource.");
        String _name_1 = e.getName();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_1);
        _builder.append(_firstUpper_1, "");
        _builder.append("sResource;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("public class SGLServerApplication extends Application implements SGLServerConstants {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Logger LOGGER = Logger.getLogger(SGLServerMain.class.getSimpleName());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String wwwRootDir;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SGLServerApplication(String rootDir){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.wwwRootDir = rootDir;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Creates a root Restlet that will receive all incoming calls.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public synchronized Restlet createInboundRoot() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("Router router = new Router(getContext());");
    _builder.newLine();
    _builder.append("            \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("//attach static web files to \"www\" folder");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Directory dir = new Directory(getContext(),this.wwwRootDir);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("dir.setListingAllowed(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("dir.setDeeplyAccessible(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    {
      EList<Entity> _entitys_1 = d.getEntitys();
      for(final Entity e_1 : _entitys_1) {
        _builder.append("    \t");
        _builder.append("// ENDPOINT = /");
        String _name_2 = e_1.getName();
        _builder.append(_name_2, "    	");
        _builder.append("s");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t");
        _builder.append("LOGGER.info(\"Attaching endpoint for \" + ");
        String _name_3 = e_1.getName();
        String _firstUpper_2 = StringExtensions.toFirstUpper(_name_3);
        _builder.append(_firstUpper_2, "    	");
        _builder.append("sResource.class.getSimpleName() + \": \" + ");
        String _name_4 = e_1.getName();
        String _firstUpper_3 = StringExtensions.toFirstUpper(_name_4);
        _builder.append(_firstUpper_3, "    	");
        _builder.append("sResource.ENDPOINT);");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t");
        _builder.append("router.attach(");
        String _name_5 = e_1.getName();
        String _firstUpper_4 = StringExtensions.toFirstUpper(_name_5);
        _builder.append(_firstUpper_4, "    	");
        _builder.append("sResource.ENDPOINT, ");
        String _name_6 = e_1.getName();
        String _firstUpper_5 = StringExtensions.toFirstUpper(_name_6);
        _builder.append(_firstUpper_5, "    	");
        _builder.append("sResource.class);");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t");
        _builder.newLine();
        _builder.append("    \t");
        _builder.append("// ENDPOINT = /");
        String _name_7 = e_1.getName();
        _builder.append(_name_7, "    	");
        _builder.append("s/{");
        String _name_8 = e_1.getName();
        _builder.append(_name_8, "    	");
        _builder.append("_id}");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t");
        _builder.append("LOGGER.info(\"Attaching endpoint for \" + ");
        String _name_9 = e_1.getName();
        String _firstUpper_6 = StringExtensions.toFirstUpper(_name_9);
        _builder.append(_firstUpper_6, "    	");
        _builder.append("Resource.class.getSimpleName() + \": \" + ");
        String _name_10 = e_1.getName();
        String _firstUpper_7 = StringExtensions.toFirstUpper(_name_10);
        _builder.append(_firstUpper_7, "    	");
        _builder.append("Resource.ENDPOINT);");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t");
        _builder.append("router.attach(");
        String _name_11 = e_1.getName();
        String _firstUpper_8 = StringExtensions.toFirstUpper(_name_11);
        _builder.append(_firstUpper_8, "    	");
        _builder.append("Resource.ENDPOINT, ");
        String _name_12 = e_1.getName();
        String _firstUpper_9 = StringExtensions.toFirstUpper(_name_12);
        _builder.append(_firstUpper_9, "    	");
        _builder.append("Resource.class);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// ENDPOINT = /");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("LOGGER.info(\"Attaching static html endpoint: \" + this.wwwRootDir);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("router.attach(\"/\",dir);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return router;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileSGLResourceMapper(final DomainModel d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.pallyup.sgl.core.entity.dao;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.pallyup.sgl.server.SGLServerMain;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class SGLResourceMapper {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//public static String get<<e.name>>s<<a.name.toFirstUpper>>(int <<e.name>>Id){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//\treturn \"http://\" + SGLServerMain.getExternalHostAddress() + \":\" + SGLServerMain.getExternalHostPort() + \"/images/sales/<<e.name>><<a.name.toFirstUpper>>\" + <<e.name>>Id + \".gif\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//}");
    _builder.newLine();
    {
      EList<Entity> _entitys = d.getEntitys();
      for(final Entity e : _entitys) {
        {
          EList<Attribute> _attributes = e.getAttributes();
          for(final Attribute a : _attributes) {
            {
              EClass _eClass = a.eClass();
              String _name = _eClass.getName();
              boolean _contentEquals = _name.contentEquals("ImageAttribute");
              if (_contentEquals) {
                _builder.append("public static String get");
                String _name_1 = e.getName();
                String _firstUpper = StringExtensions.toFirstUpper(_name_1);
                _builder.append(_firstUpper, "");
                _builder.append("s");
                String _name_2 = a.getName();
                String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
                _builder.append(_firstUpper_1, "");
                _builder.append("(int ");
                String _name_3 = e.getName();
                _builder.append(_name_3, "");
                _builder.append("sId){");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("//SGLServerMain.get");
                String _name_4 = e.getName();
                String _firstUpper_2 = StringExtensions.toFirstUpper(_name_4);
                _builder.append(_firstUpper_2, "	");
                _builder.append("sImagesDirectory();");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("return \"http://\" + SGLServerMain.getExternalHostAddress() + \":\" + SGLServerMain.getExternalHostPort() + \"/images/");
                String _name_5 = e.getName();
                _builder.append(_name_5, "	");
                _builder.append("s/");
                String _name_6 = e.getName();
                String _firstUpper_3 = StringExtensions.toFirstUpper(_name_6);
                _builder.append(_firstUpper_3, "	");
                _builder.append("s_");
                String _name_7 = a.getName();
                String _firstUpper_4 = StringExtensions.toFirstUpper(_name_7);
                _builder.append(_firstUpper_4, "	");
                _builder.append("_\" + ");
                String _name_8 = e.getName();
                _builder.append(_name_8, "	");
                _builder.append("sId + \".gif\";");
                _builder.newLineIfNotEmpty();
                _builder.append("}");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileSGLServerMain(final DomainModel d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.pallyup.sgl.server;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.net.URL;");
    _builder.newLine();
    _builder.append("import java.util.NoSuchElementException;");
    _builder.newLine();
    _builder.append("import java.util.logging.FileHandler;");
    _builder.newLine();
    _builder.append("import java.util.logging.Level;");
    _builder.newLine();
    _builder.append("import java.util.logging.Logger;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.apache.commons.configuration.Configuration;");
    _builder.newLine();
    _builder.append("import org.apache.commons.configuration.ConfigurationException;");
    _builder.newLine();
    _builder.append("import org.apache.commons.configuration.PropertiesConfiguration;");
    _builder.newLine();
    _builder.append("import org.restlet.Component;");
    _builder.newLine();
    _builder.append("import org.restlet.Server;");
    _builder.newLine();
    _builder.append("import org.restlet.data.Protocol;");
    _builder.newLine();
    _builder.append("import org.restlet.ext.jetty.AjpServerHelper;");
    _builder.newLine();
    _builder.append("import org.restlet.ext.jetty.HttpServerHelper;");
    _builder.newLine();
    _builder.append("import org.restlet.ext.jetty.JettyServerHelper;");
    _builder.newLine();
    _builder.append("import org.restlet.service.LogService;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class SGLServerMain implements SGLServerConstants {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final Logger LOGGER = Logger");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(".getLogger(SGLServerMain.class.getSimpleName());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String _CONFIG_WWW_ROOT_DIR_URI;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String _CONFIG_WWW_LOG;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static int _CONFIG_WWW_PORT;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String _CONFIG_WWW_SQLITE_DB;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String _CONFIG_WWW_HOSTNAME;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String _CONFIG_WWW_SERVER;");
    _builder.newLine();
    {
      EList<Entity> _entitys = d.getEntitys();
      for(final Entity e : _entitys) {
        {
          EList<Attribute> _attributes = e.getAttributes();
          for(final Attribute a : _attributes) {
            {
              EClass _eClass = a.eClass();
              String _name = _eClass.getName();
              boolean _contentEquals = _name.contentEquals("ImageAttribute");
              if (_contentEquals) {
                _builder.append("\t");
                _builder.append("//private static String _CONFIG_WWW_");
                String _name_1 = e.getName();
                String _upperCase = _name_1.toUpperCase();
                _builder.append(_upperCase, "	");
                _builder.append("_IMAGES;");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("public static void loadServerProperties(String[] args)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throws ConfigurationException, NoSuchElementException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Load properties file");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Configuration config;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (args.length == 1) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.info(\"Attempting to load properties from specified file passed through args...\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("config = new PropertiesConfiguration(args[0]);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.info(\"Attempting to load default properties file (sgl.properties).\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("config = new PropertiesConfiguration(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("SGLServerConstants.CONFIG_DEFAULT_FILE);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("_CONFIG_WWW_ROOT_DIR_URI = config");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".getString(SGLServerConstants.CONFIG_WWW_ROOT_DIR_URI);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("_CONFIG_WWW_LOG = config");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".getString(SGLServerConstants.CONFIG_WWW_LOG);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("_CONFIG_WWW_PORT = config");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".getInt(SGLServerConstants.CONFIG_WWW_PORT);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("_CONFIG_WWW_SQLITE_DB = config");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".getString(SGLServerConstants.CONFIG_WWW_SQLITE_DB);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("_CONFIG_WWW_HOSTNAME = config");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".getString(SGLServerConstants.CONFIG_WWW_HOSTNAME);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("_CONFIG_WWW_SERVER = config");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".getString(SGLServerConstants.CONFIG_WWW_SERVER);");
    _builder.newLine();
    {
      EList<Entity> _entitys_1 = d.getEntitys();
      for(final Entity e_1 : _entitys_1) {
        {
          EList<Attribute> _attributes_1 = e_1.getAttributes();
          for(final Attribute a_1 : _attributes_1) {
            {
              EClass _eClass_1 = a_1.eClass();
              String _name_2 = _eClass_1.getName();
              boolean _contentEquals_1 = _name_2.contentEquals("ImageAttribute");
              boolean _booleanValue = Boolean.valueOf(_contentEquals_1).booleanValue();
              if (_booleanValue) {
                _builder.append("\t\t");
                _builder.append("//_CONFIG_WWW_");
                String _name_3 = e_1.getName();
                String _upperCase_1 = _name_3.toUpperCase();
                _builder.append(_upperCase_1, "		");
                _builder.append("_IMAGES = config");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("//.getString(SGLServerConstants.CONFIG_WWW_");
                String _name_4 = e_1.getName();
                String _upperCase_2 = _name_4.toUpperCase();
                _builder.append(_upperCase_2, "		");
                _builder.append("_IMAGES);");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (_CONFIG_WWW_ROOT_DIR_URI == null || _CONFIG_WWW_LOG == null");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("|| _CONFIG_WWW_SQLITE_DB == null");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("|| _CONFIG_WWW_HOSTNAME == null");
    _builder.newLine();
    {
      EList<Entity> _entitys_2 = d.getEntitys();
      for(final Entity e_2 : _entitys_2) {
        {
          EList<Attribute> _attributes_2 = e_2.getAttributes();
          for(final Attribute a_2 : _attributes_2) {
            {
              EClass _eClass_2 = a_2.eClass();
              String _name_5 = _eClass_2.getName();
              boolean _contentEquals_2 = _name_5.contentEquals("ImageAttribute");
              boolean _booleanValue_1 = Boolean.valueOf(_contentEquals_2).booleanValue();
              if (_booleanValue_1) {
                _builder.append("\t\t");
                _builder.append("//|| _CONFIG_WWW_");
                String _name_6 = e_2.getName();
                String _upperCase_3 = _name_6.toUpperCase();
                _builder.append(_upperCase_3, "		");
                _builder.append("_IMAGES == null");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("\t\t\t\t");
    _builder.append("|| _CONFIG_WWW_SERVER == null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new NoSuchElementException(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("\"Required parameters not defined in the specified properties file.\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static void initiliaseComponent(Component serverComponent)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throws SecurityException, IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Add support for serving files");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("serverComponent.getClients().add(Protocol.FILE);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SGLServerApplication sglServer = new SGLServerApplication(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\"file://\" + _CONFIG_WWW_ROOT_DIR_URI);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("serverComponent.getDefaultHost().attach(sglServer);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOGGER.info(\"Finished initialising component\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static void initialiseLogging(Component serverComponent)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throws SecurityException, IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// setup logging");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LogService logService = serverComponent.getLogService();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("logService.setEnabled(true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("logService.setLoggerName(\"com.naviquan\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("logService");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".setLogFormat(\"{cia} {m} {S} {rp}     AGENT:{cig}    REF:{fp}\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("FileHandler fh = new FileHandler(_CONFIG_WWW_LOG, true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOGGER.addHandler(fh);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOGGER.setUseParentHandlers(true);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static void loadJseServer(Component serverComponent)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throws Exception {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Start the component.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOGGER.info(\"Starting \" + SGLServerMain.class.getSimpleName()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ \" component using JSE SERVER\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("serverComponent.getServers().add(Protocol.HTTP, _CONFIG_WWW_PORT);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// serverComponent.getContext().getParameters().add(\"maxThreads\",");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// \"512\"); //TODO: Temporary solution to threads problem.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// serverComponent.getContext().getParameters().add(\"maxTotalConnections\",");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// \"512\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("serverComponent.start();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static void loadJettyServer(Component serverComponent)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throws Exception {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Start the component");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOGGER.info(\"Starting \" + SGLServerMain.class.getSimpleName()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ \" component using JETTY SERVER\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// create embedding jetty server");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Server embedingJettyServer = new Server(serverComponent.getContext()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".createChildContext(), Protocol.HTTP, _CONFIG_WWW_PORT,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("serverComponent);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// construct and start JettyServerHelper");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JettyServerHelper jettyServerHelper = new HttpServerHelper(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("embedingJettyServer);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOGGER.info(\"**Starting Jetty Server with \"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ jettyServerHelper.getMaxThreads() + \" threads.**\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("jettyServerHelper.start();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//fakes a call to the to allow initial server error (BindException).");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("new URL(\"http://localhost:\" + _CONFIG_WWW_PORT).openConnection().getInputStream().close();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@SuppressWarnings(\"unused\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static void loadJettyAjpServer(Component serverComponent)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throws Exception {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Start the component");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOGGER.info(\"Starting \" + SGLServerMain.class.getSimpleName()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ \" component using JETTY AJP SERVER\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// create embedding AJP Server");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Server embedingJettyAJPServer = new Server(serverComponent.getContext()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".createChildContext(), Protocol.HTTP, 8183, serverComponent);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// construct and start AjpServerHelper");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("AjpServerHelper ajpServerHelper = new AjpServerHelper(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("embedingJettyAJPServer);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOGGER.info(\"**Starting Jetty Ajp Server with \"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ ajpServerHelper.getMaxThreads() + \" threads.**\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ajpServerHelper.start();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static String getSGLSqliteDbPath() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return _CONFIG_WWW_SQLITE_DB;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static String getExternalHostAddress() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return _CONFIG_WWW_HOSTNAME;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static int getExternalHostPort() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return _CONFIG_WWW_PORT;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      EList<Entity> _entitys_3 = d.getEntitys();
      for(final Entity e_3 : _entitys_3) {
        {
          EList<Attribute> _attributes_3 = e_3.getAttributes();
          for(final Attribute a_3 : _attributes_3) {
            {
              EClass _eClass_3 = a_3.eClass();
              String _name_7 = _eClass_3.getName();
              boolean _contentEquals_3 = _name_7.contentEquals("ImageAttribute");
              boolean _booleanValue_2 = Boolean.valueOf(_contentEquals_3).booleanValue();
              if (_booleanValue_2) {
                _builder.append("\t");
                _builder.append("//public static String get");
                String _name_8 = e_3.getName();
                String _firstUpper = StringExtensions.toFirstUpper(_name_8);
                _builder.append(_firstUpper, "	");
                _builder.append("ImagesDirectory() {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("//\treturn _CONFIG_WWW_");
                String _name_9 = e_3.getName();
                String _upperCase_4 = _name_9.toUpperCase();
                _builder.append(_upperCase_4, "	");
                _builder.append("_IMAGES;");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("//}");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Load properties file ---");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("boolean propertiesLoaded = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StringBuffer sb = new StringBuffer();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("loadServerProperties(args);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.info(\"Successfully loaded properties file.\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("sb.append(\"\\nRunning SGL Server with the following configuration:\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("sb.append(\"\\tWWW SERVER : \" + _CONFIG_WWW_SERVER + \"\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("sb.append(\"\\tWWW ROOT DIR: \" + _CONFIG_WWW_ROOT_DIR_URI + \"\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("sb.append(\"\\tWWW LOG: \" + _CONFIG_WWW_LOG + \"\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("sb.append(\"\\tWWW PORT: \" + _CONFIG_WWW_PORT + \"\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("sb.append(\"\\tWWW SQLITE DB: \" + _CONFIG_WWW_SQLITE_DB + \"\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("sb.append(\"\\tWWW HOSTNAME: \" + _CONFIG_WWW_HOSTNAME + \"\\n\");");
    _builder.newLine();
    {
      EList<Entity> _entitys_4 = d.getEntitys();
      for(final Entity e_4 : _entitys_4) {
        {
          EList<Attribute> _attributes_4 = e_4.getAttributes();
          for(final Attribute a_4 : _attributes_4) {
            {
              EClass _eClass_4 = a_4.eClass();
              String _name_10 = _eClass_4.getName();
              boolean _contentEquals_4 = _name_10.contentEquals("ImageAttribute");
              boolean _booleanValue_3 = Boolean.valueOf(_contentEquals_4).booleanValue();
              if (_booleanValue_3) {
                _builder.append("\t\t\t");
                _builder.append("//sb.append(\"\\tWWW ");
                String _name_11 = e_4.getName();
                String _upperCase_5 = _name_11.toUpperCase();
                _builder.append(_upperCase_5, "			");
                _builder.append(" IMAGES: \" + _CONFIG_WWW_");
                String _name_12 = e_4.getName();
                String _upperCase_6 = _name_12.toUpperCase();
                _builder.append(_upperCase_6, "			");
                _builder.append("_IMAGES + \"\\n\");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("\t\t\t");
    _builder.append("LOGGER.info(sb.toString());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("propertiesLoaded = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (ConfigurationException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.log(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Level.SEVERE,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("\"A Fatal Problem Occured. Could not start server (properties file was not loaded).\",");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (NoSuchElementException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.log(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Level.SEVERE,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("\"A Fatal Problem Occured. Could not start server  (could not load required fields from properties file).\",");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (!propertiesLoaded)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.exit(0);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Load server ---");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Component serverComponent = new Component();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("initiliaseComponent(serverComponent);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("initialiseLogging(serverComponent);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (_CONFIG_WWW_SERVER.equals(\"jetty\"))");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("loadJettyServer(serverComponent);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("loadJseServer(serverComponent);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.info(sb.toString());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.log(Level.SEVERE, \"A Fatal Problem Occured.\", e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.log(Level.SEVERE, \"A Fatal Problem Occured.\", e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileSGLServerConstants(final DomainModel d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.pallyup.sgl.server;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public interface SGLServerConstants {");
    _builder.newLine();
    _builder.append("public static final String CONFIG_DEFAULT_FILE = \"sgl.properties\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public static final String CONFIG_WWW_ROOT_DIR_URI = \"sgl.www.rootdir\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public static final String CONFIG_WWW_LOG = \"sgl.www.log\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public static final String CONFIG_WWW_PORT = \"sgl.www.port\";\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public static final String CONFIG_WWW_SQLITE_DB = \"sgl.www.sqlitedb\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public static final String CONFIG_WWW_HOSTNAME = \"sgl.www.hostname\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public static final String CONFIG_WWW_SERVER = \"sgl.www.server\";");
    _builder.newLine();
    {
      EList<Entity> _entitys = d.getEntitys();
      for(final Entity e : _entitys) {
        {
          EList<Attribute> _attributes = e.getAttributes();
          for(final Attribute a : _attributes) {
            {
              EClass _eClass = a.eClass();
              String _name = _eClass.getName();
              boolean _contentEquals = _name.contentEquals("ImageAttribute");
              if (_contentEquals) {
                _builder.append("//public static final String CONFIG_WWW_");
                String _name_1 = e.getName();
                String _upperCase = _name_1.toUpperCase();
                _builder.append(_upperCase, "");
                _builder.append("_IMAGES = \"sgl.www.");
                String _name_2 = e.getName();
                _builder.append(_name_2, "");
                _builder.append("_images\";");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileSGLSqlProvider() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("package com.pallyup.sgl.core.data;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.sql.Connection;");
    _builder.newLine();
    _builder.append("import java.sql.DriverManager;");
    _builder.newLine();
    _builder.append("import java.sql.PreparedStatement;");
    _builder.newLine();
    _builder.append("import java.sql.SQLException;");
    _builder.newLine();
    _builder.append("import java.sql.Statement;");
    _builder.newLine();
    _builder.append("import java.util.logging.Level;");
    _builder.newLine();
    _builder.append("import java.util.logging.Logger;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.pallyup.sgl.core.entity.dao.SGLDaoException;");
    _builder.newLine();
    _builder.append("import com.pallyup.sgl.server.SGLServerMain;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class SGLSqlProvider {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Logger LOGGER = Logger.getLogger(SGLSqlProvider.class.getSimpleName());");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Connection CONNECTION;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static Connection getConnection() throws SQLException,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ClassNotFoundException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (CONNECTION == null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Class.forName(\"org.sqlite.JDBC\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("CONNECTION = DriverManager.getConnection(\"jdbc:sqlite:\"+SGLServerMain.getSGLSqliteDbPath());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Statement stmt = CONNECTION.createStatement();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("boolean result  = stmt.execute(\"PRAGMA foreign_keys=ON;\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LOGGER.info(\"(RESULT: \" + result + \") Enabling Foreign Key Support - PRAGMA foreign_keys = on\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (SQLException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LOGGER.log(Level.SEVERE, \"Failed to enable foreign key support\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("throw new SGLDaoException(e.getMessage(), e);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return CONNECTION;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static PreparedStatement getPreparedStatement(String sql){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PreparedStatement st = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("st = SGLSqlProvider.getConnection().prepareStatement(sql);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (SQLException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.severe(e.getClass() + \": Could not create PreparedStatement for \" + sql + \"\\n\" + e.getMessage());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (ClassNotFoundException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.severe(e.getClass() + \": Possible problem with database driver.\\n \" + e.getMessage());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return st;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileDaoOptions() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.pallyup.sgl.core.entity.dao;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class DaoOptions extends HashMap<String, Object> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final long serialVersionUID = 1L;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public DaoOptions(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileSGLDaoException() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.pallyup.sgl.core.entity.dao;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"serial\")");
    _builder.newLine();
    _builder.append("public class SGLDaoException extends RuntimeException {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SGLDaoException() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SGLDaoException(String msg) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(msg);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SGLDaoException(Throwable cause) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(cause);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SGLDaoException(String msg, Throwable cause) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(msg, cause);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileCommonUtils() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.pallyup.sgl.core.util;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.Color;");
    _builder.newLine();
    _builder.append("import java.awt.Graphics2D;");
    _builder.newLine();
    _builder.append("import java.awt.Image;");
    _builder.newLine();
    _builder.append("import java.awt.image.BufferedImage;");
    _builder.newLine();
    _builder.append("import java.io.ByteArrayInputStream;");
    _builder.newLine();
    _builder.append("import java.io.ByteArrayOutputStream;");
    _builder.newLine();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.util.Calendar;");
    _builder.newLine();
    _builder.append("import java.util.Iterator;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.imageio.ImageIO;");
    _builder.newLine();
    _builder.append("import javax.imageio.ImageReadParam;");
    _builder.newLine();
    _builder.append("import javax.imageio.ImageReader;");
    _builder.newLine();
    _builder.append("import javax.imageio.stream.ImageInputStream;");
    _builder.newLine();
    _builder.append("import javax.imageio.stream.ImageOutputStream;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class CommonUtils {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static int getCurrentDateInt() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Calendar cal = Calendar.getInstance();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int day = cal.get(Calendar.DATE);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int month = cal.get(Calendar.MONTH) + 1;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int year = cal.get(Calendar.YEAR);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String dateAsInt = String.valueOf(year);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (month < 10)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dateAsInt += \"0\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dateAsInt += String.valueOf(month);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (day < 10)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dateAsInt += \"0\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dateAsInt += String.valueOf(day);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Integer.parseInt(dateAsInt);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static boolean fileExists(String fileName){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(fileName==null)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new IllegalArgumentException(\"fileName cannot be null\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new File(fileName).exists();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void saveByteImageToFile(byte[] bytes, String path)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throws IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Before is how to change ByteArray back to Image");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ByteArrayInputStream bis = new ByteArrayInputStream(bytes);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Iterator<?> readers = ImageIO.getImageReadersByFormatName(\"gif\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// ImageIO is a class containing static convenience methods for locating");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// ImageReaders");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// and ImageWriters, and performing simple encoding and decoding.");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ImageReader reader = (ImageReader) readers.next();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Object source = bis; // File or InputStream, it seems file is OK");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ImageInputStream iis = ImageIO.createImageInputStream(source);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Returns an ImageInputStream that will take its input from the given");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Object");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("reader.setInput(iis, true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ImageReadParam param = reader.getDefaultReadParam();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Image image = reader.read(0, param);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// got an image file");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BufferedImage bufferedImage = new BufferedImage(image.getWidth(null),");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("image.getHeight(null), BufferedImage.TYPE_INT_RGB);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// bufferedImage is the RenderedImage to be written");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Graphics2D g2 = bufferedImage.createGraphics();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//g2.drawImage(image, null, null);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("g2.drawImage(image, 0, 0, bufferedImage.getWidth(), bufferedImage.getHeight(), Color.white, null);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("File imageFile = new File(path);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ImageIO.write(bufferedImage, \"gif\", imageFile);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// \"jpg\" is the format of the image");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// imageFile is the file to be written to.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static byte[] convertGifBytesToJpegBytes(byte[] bytes, Color backgroundColor) throws Exception");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("BufferedImage bufferedImage = ImageIO.read(inputStream);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("BufferedImage newBi = new BufferedImage(bufferedImage.getWidth(), bufferedImage.getHeight(), BufferedImage.TYPE_INT_RGB);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("Graphics2D g2d = (Graphics2D) newBi.getGraphics();");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("g2d.drawImage(bufferedImage, 0, 0, bufferedImage.getWidth(), bufferedImage.getHeight(), backgroundColor, null);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("//bufferedImage.getHeight(), null);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("ByteArrayOutputStream osByteArray = new ByteArrayOutputStream();");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("ImageOutputStream outputStream = ImageIO.createImageOutputStream(osByteArray);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("ImageIO.write(newBi, \"jpg\", outputStream);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("outputStream.flush();");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("outputStream.close();");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("return osByteArray.toByteArray();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileResult() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.pallyup.sgl.server.core;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Result {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private HashMap<String, Object> resultData;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static enum Status {OK, FAILED};");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Result(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resultData = new HashMap<String, Object>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.resultData.put(\"status\", Status.FAILED);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setData(Object data){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.resultData.put(\"data\", data);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setStatus(Status status){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(status==null)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new IllegalArgumentException(\"Result status cannot be null\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(status == Status.OK)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.resultData.put(\"status\", Status.OK);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if (status == Status.FAILED)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.resultData.put(\"status\", Status.FAILED);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setError(String errorMessage, int errorCode){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, Object> error = new HashMap<String, Object>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("error.put(\"message\", errorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("error.put(\"code\", errorCode);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.resultData.put(\"error\", error);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Object getData() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return resultData.get(\"data\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Status getStatus(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (Status) resultData.get(\"status\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Object getError(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.resultData.get(\"error\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"Result [data=\" + resultData + \"]\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
